when a designer designs something – whether a house , computer program , or lamp – they must make many decisions about how to solve problems a single problem is documented with its typical place ( the syntax ) , and use ( the grammar ) with the most common and recognized good solution seen in the wild , like the examples seen in dictionary each pattern has a name , a descriptive entry , and some cross-references , much like a dictionary entry patterns might be invented or found and studied , such as the naturally occurring patterns of design that characterize human environments purplsoc 2015 proceedings , july 3-5 2015 krems , austria purplsoc meeting on the many open scientific questions , e.g regarding the theoretical background of patterns and the practical implementation of pattern methods in research and teaching like all languages , a pattern language has vocabulary , syntax , and grammar – but a pattern language applies to some complex activity other than communication so , for example , the language for architecture describes items like : settlements , buildings , rooms , windows , latches , etc the solution includes grammar that describes how the solution solves a problem or produces a benefit in christopher alexander 's book a pattern language , the patterns are in decreasing order by size , with a separate alphabetic index the web of relationships in the index of the language provides many paths through the design process eventually all of the remaining design problems are small enough or routine enough to be solved by improvisation by the builders , and the '' design '' is done ) is left to the discretion of the designer , depending on the problem when this happens , it 's common for a designer to realize that the problem is actually part of a larger solution in the language , therefore , each pattern has to indicate its relationships to other patterns and to the language as a whole the desire to empower users of architecture was , in fact , what led alexander to undertake a pattern language project for architecture in the first place the idea expressed in a pattern should be general enough to be applied in very different systems within its context , but still specific enough to give constructive guidance for instance , alexander 's pattern '' a place to wait '' addresses bus stops in the same way as waiting rooms in a surgery , while still proposing helpful and constructive solutions however , even a very abstract pattern will usually contain examples that are , by nature , absolutely concrete and specific it is generally claimed that all patterns need at least some existing real-world examples a pattern must characterize the problems that it is meant to solve , the context or situation where these problems arise , and the conditions under which the proposed solutions can be recommended the forces would be the need to communicate , and the need to get other things done at the same time ( cooking , inspecting the bookshelf ) more general patterns would be '' wireless device '' or '' secondary activity '' , suggesting that a secondary activity ( such as talking on the phone , or inspecting the pockets of your jeans ) should not interfere with other activities one of his key values is making these people feel more alive for instance , when discussing a street café , alexander discusses the possible desires of a guest , but also mentions people who just walk by the qualities of a software system , for instance , could be rated by observing whether users spend their time enjoying or struggling with the system in design patterns , make only little use of pattern linking – possibly because it did not make that much sense for their collection of patterns the original concept for the book a pattern language was that it would be published in the form of a 3-ring binder , so that pages could easily be added later ; this proved impractical in publishing the solutions proposed in the book include suggestions ranging from how cities and towns should be structured to where windows should be placed in a room examples since the 1990s include software design patterns in software engineering and , more generally , architectural pattern ( computer science ) , as well as interaction design patterns leitner , helmut ( 2015 ) : pattern theory : introduction and perspectives on the tracks of christopher alexander 