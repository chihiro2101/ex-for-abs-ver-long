the factory method design pattern is one of the design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software , that is , objects that are easier to implement , change , test , and reuse the factory method design pattern is used instead of the regular class constructor for keeping within the solid principles of programming , decoupling the construction of objects from the objects themselves the vehicle constructor code then calls a motor factory method , to create the desired motor that complies with the imotor interface : for example , a vehicle can be prevented from being instantiated directly since it has no constructor , and only subclasses like electricplane or oldcar can be created by calling the vehicle ( static ) factory method in the subclass constructor or initializer this is referred to as code coupling and the factory method pattern assists in decoupling the code the factory method design pattern is used by first defining a separate operation , a factory method , for creating an object , and then using this factory method by calling it to create the object the factory method pattern relies on inheritance , as object creation is delegated to subclasses that implement the factory method to create objects factory design pattern implementation in java factory method in uml and in lepus3 ( a design description language ) consider static factory methods by joshua bloch 