the factory method design pattern is used instead of the regular class constructor for keeping within the solid principles of programming , decoupling the construction of objects from the objects themselves the vehicle constructor code then calls a motor factory method , to create the desired motor that complies with the imotor interface : for example , a class vehicle with a member motor defined with a dynamic type , can have subclasses of type electricplane and oldcar each constructed with a different type of motor this can be accomplished by constructing the subclasses with a vehicle factory method , while supplying the motor type : for example if there are two constructors and a more readable construction of the classes would be to use vs allows a class to defer instantiation to subclasses , and to prevent direct instantiation of an object of the parent class type the factory method design pattern is used by first defining a separate operation , a factory method , for creating an object , and then using this factory method by calling it to create the object the factory method design pattern handles these problems by defining a separate method for creating the objects , which subclasses can then override to specify the subtype of product that will be created the factory method pattern relies on inheritance , as object creation is delegated to subclasses that implement the factory method to create objects 