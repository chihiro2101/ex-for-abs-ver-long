an evaluation function , also known as a heuristic evaluation function or static evaluation function , is a function used by game-playing computer programs to estimate the value or goodness of a position ( usually at a leaf or terminal node ) in a game tree . a tree of such evaluations is usually part of a minimax or related search paradigm which returns a particular node and its evaluation as a result of alternately selecting the most favorable move for the side on move at each ply of the game tree . the value is a quantized scalar , often in nths of the value of a playing piece such as a stone in go or a pawn in chess . n may be tenths , hundredths or other convenient fraction . the value is presumed to represent the relative probability of winning if the game tree were expanded from that node to the end of the game . the function looks only at the current position ( i.e . what spaces the pieces are on and their relationship to each other ) and does not take into account the history of the position or explore possible moves forward of the node ( therefore static ) . this implies that for dynamic positions where tactical threats exist , the evaluation function will not be an accurate assessment of the position . these positions are termed non-quiescent ; they require at least a limited kind of search extension called quiescence search to resolve threats before evaluation . some values returned by evaluation functions are absolute rather than heuristic , if a win , loss or draw occurs at the node . there do not exist analytical or theoretical models for evaluation functions for unsolved games , nor are such functions entirely ad-hoc . the composition of evaluation functions is determined empirically by inserting a candidate function into an automaton and evaluating its subsequent performance . a significant body of evidence now exists for several games like chess , shogi and go as to the general composition of evaluation functions for them . the general approach for constructing evaluation functions is as a linear combination of various weighted terms determined to influence the value of a position . each term may be considered to be composed of first order factors ( those that depend only on the space and any piece on it ) , second order factors ( the space in relation to other spaces ) , and nth-order factors ( dependencies on history of the position ) . there is an intricate relationship between search and knowledge in the evaluation function . deeper search favors less near-term tactical factors and more subtle long-horizon positional motifs in the evaluation . there is also a trade-off between efficacy of encoded knowledge and computational complexity : computing detailed knowledge may take so much time that performance decreases , so approximations to exact knowledge are often better . because the evaluation function depends on the nominal depth of search as well as the extensions and reductions employed in the search , there is no generic or stand-alone formulation for an evaluation function . an evaluation function which works well in one application will usually need to be substantially re-tuned to work effectively in another application . computerized games that employ evaluation functions include chess , go , shogi ( japanese chess ) , reversi , hex , and checkers . some games like tic-tac-toe are solved game , and do not require search or evaluation because a discrete solution tree is available .