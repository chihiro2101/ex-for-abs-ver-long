in computational complexity theory , an interactive proof system is an abstract machine that models computation as the exchange of messages between two parties : a prover and a verifier . the parties interact by exchanging messages in order to ascertain whether a given string belongs to a language or not . the prover possesses unlimited computational resources but can not be trusted , while the verifier has bounded computation power but is assumed to be always honest . messages are sent between the verifier and prover until the verifier has an answer to the problem and has '' convinced '' itself that it is correct . all interactive proof systems have two requirements : completeness : if the statement is true , the honest verifier ( that is , one following the protocol properly ) can be convinced of this fact by an untrusted prover . soundness : if the statement is false , no prover , even if it does n't follow the protocol , can convince the honest verifier that it is true , except with some small probability . the specific nature of the system , and so the complexity class of languages it can recognize , depends on what sort of bounds are put on the verifier , as well as what abilities it is given & mdash ; for example , most interactive proof systems depend critically on the verifier 's ability to make random choices . it also depends on the nature of the messages exchanged & mdash ; how many and what they can contain . interactive proof systems have been found to have some important implications for traditional complexity classes defined using only one machine . the main complexity classes describing interactive proof systems are am and ip .