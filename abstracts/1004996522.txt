in computer science , a high-level programming language is a programming language with strong abstraction from the details of the computer . in contrast to low-level programming languages , it may use natural language elements , be easier to use , or may automate ( or even hide entirely ) significant areas of computing systems ( e.g . memory management ) , making the process of developing a program simpler and more understandable than when using a lower-level language . the amount of abstraction provided defines how '' high-level '' a programming language is . hthreads - rd glossary in the 1960s , high-level programming languages using a compiler were commonly called autocodes . examples of autocodes are cobol and fortran . the first high-level programming language designed for computers was plankalkül , created by konrad zuse . ( 1997 ) . '' konrad zuse 's plankalkül : the first high-level '' non von neumann '' programming language '' . ieee annals of the history of computing , vol . 19 , no . 2 , pp . & nbsp ; 17–24 , april–june , 1997 . ( abstract ) however , it was not implemented in his time , and his original contributions were largely isolated from other developments due to world war ii , aside from the language 's influence on the '' superplan '' language by heinz rutishauser and also to some degree algol . the first significantly widespread high-level language was fortran , a machine-independent development of ibm 's earlier autocode systems . algol , defined in 1958 and 1960 by committees of european and american computer scientists , introduced recursion as well as nested functions under lexical scope . it was also the first language with a clear distinction between value and call by names and their corresponding semantics . although it lacked a notion of call by references , which could be a problem in some situations . several successors , including algolw , algol68 , simula , pascal , modula and ada therefore included reference-parameters ( the related c-language family instead allowed addresses as value-parameters ) . algol also introduced several structured programming concepts , such as the while-do and if-then-else constructs and its syntax was the first to be described in formal notation – '' backus–naur form '' ( bnf ) . during roughly the same period , cobol introduced records ( also called structs ) and lisp introduced a fully general lambda abstraction in a programming language for the first time .