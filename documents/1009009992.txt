Pattern language

what is a pattern ? . when a designer designs something – whether a house , computer program , or lamp – they must make many decisions about how to solve problems . a single problem is documented with its typical place ( the syntax ) , and use ( the grammar ) with the most common and recognized good solution seen in the wild , like the examples seen in dictionary . each such entry is a single design pattern . each pattern has a name , a descriptive entry , and some cross-references , much like a dictionary entry . a documented pattern should explain why that solution is good in the pattern 's contexts . elemental or universal patterns such as '' door '' or '' partnership '' are versatile ideals of design , either as found in experience or for use as components in practice , explicitly described as holistic resolutions of the forces in recurrent contexts and circumstances , whether in architecture , medicine , software development or governance , etc . patterns might be invented or found and studied , such as the naturally occurring patterns of design that characterize human environments . henshaw , j . guiding patterns of naturally occurring design : elements . purplsoc 2015 proceedings , july 3-5 2015 krems , austria purplsoc meeting on the many open scientific questions , e.g . regarding the theoretical background of patterns and the practical implementation of pattern methods in research and teaching . like all languages , a pattern language has vocabulary , syntax , and grammar – but a pattern language applies to some complex activity other than communication . in pattern languages for design , the parts break down in this way : the language description – the vocabulary – is a collection of named , described solutions to problems in a field of interest . these are called design patterns . so , for example , the language for architecture describes items like : settlements , buildings , rooms , windows , latches , etc . each solution includes syntax , a description that shows where the solution fits in a larger , more comprehensive or more abstract design . this automatically links the solution into a web of other needed solutions . for example , rooms have ways to get light , and ways to get people in and out . the solution includes grammar that describes how the solution solves a problem or produces a benefit . so , if the benefit is unneeded , the solution is not used . perhaps that part of the design can be left empty to save money or other resources ; if people do not need to wait to enter a room , a simple doorway can replace a waiting room . in the language description , grammar and syntax cross index ( often with a literal alphabetic index of pattern names ) to other named solutions , so the designer can quickly think from one solution to related , needed solutions , and document them in a logical way . in christopher alexander 's book a pattern language , the patterns are in decreasing order by size , with a separate alphabetic index . the web of relationships in the index of the language provides many paths through the design process . this simplifies the design work because designers can start the process from any part of the problem they understand and work toward the unknown parts . at the same time , if the pattern language has worked well for many projects , there is reason to believe that even a designer who does not completely understand the design problem at first will complete the design process , and the result will be usable . for example , skiers coming inside must shed snow and store equipment . the messy snow and boot cleaners should stay outside . the equipment needs care , so the racks should be inside . many patterns form a language . just as words must have grammar and semantic relationships to each other in order to make a spoken language useful , design patterns must be related to each other in position and utility order to form a pattern language . christopher alexander 's work describes a process of decomposition , in which the designer has a problem ( perhaps a commercial assignment ) , selects a solution , then discovers new , smaller problems resulting from the larger solution . occasionally , the smaller problems have no solution , and a different larger solution must be selected . eventually all of the remaining design problems are small enough or routine enough to be solved by improvisation by the builders , and the '' design '' is done . the actual organizational structure ( hierarchy , iterative , etc . ) is left to the discretion of the designer , depending on the problem . this explicitly lets a designer explore a design , starting from some small part . when this happens , it 's common for a designer to realize that the problem is actually part of a larger solution . at this point , the design almost always becomes a better design . in the language , therefore , each pattern has to indicate its relationships to other patterns and to the language as a whole . this gives the designer using the language a great deal of guidance about the related problems that must be solved . the most difficult part of having an outside expert apply a pattern language is in fact to get a reliable , complete list of the problems to be solved . of course , the people most familiar with the problems are the people that need a design . so , alexander famously advocated on-site improvisation by concerned , empowered users , alexander , christopher , the oregon project as a powerful way to form very workable large-scale initial solutions , maximizing the utility of a design , and minimizing the design rework . the desire to empower users of architecture was , in fact , what led alexander to undertake a pattern language project for architecture in the first place . design problems in a context . an important aspect of design patterns is to identify and document the key ideas that make a good system different from a poor system ( that may be a house , a computer program or an object of daily use ) , and to assist in the design of future systems . the idea expressed in a pattern should be general enough to be applied in very different systems within its context , but still specific enough to give constructive guidance . the range of situations in which the problems and solutions addressed in a pattern apply is called its context . an important part in each pattern is to describe this context . examples can further illustrate how the pattern applies to very different situation . for instance , alexander 's pattern '' a place to wait '' addresses bus stops in the same way as waiting rooms in a surgery , while still proposing helpful and constructive solutions . the design patterns by gamma et al . proposes solutions that are independent of the programming language , and the program 's application domain . still , the problems and solutions described in a pattern can vary in their level of abstraction and generality on the one side , and specificity on the other side . in the end this depends on the author 's preferences . however , even a very abstract pattern will usually contain examples that are , by nature , absolutely concrete and specific . patterns can also vary in how far they are proven in the real world . alexander gives each pattern a rating by zero , one or two stars , indicating how well they are proven in real-world examples . it is generally claimed that all patterns need at least some existing real-world examples . it is , however , conceivable to document yet unimplemented ideas in a pattern-like format . the patterns in alexander 's book also vary in their level of scale – some describing how to build a town or neighbourhood , others dealing with individual buildings and the interior of rooms . alexander sees the low-scale artifacts as constructive elements of the large-scale world , so they can be connected to a hierarchic network . balancing of forces . a pattern must characterize the problems that it is meant to solve , the context or situation where these problems arise , and the conditions under which the proposed solutions can be recommended . often these problems arise from a conflict of different interests or '' forces '' . a pattern emerges as a dialogue that will then help to balance the forces and finally make a decision . for instance , there could be a pattern suggesting a wireless telephone . the forces would be the need to communicate , and the need to get other things done at the same time ( cooking , inspecting the bookshelf ) . a very specific pattern would be just '' wireless telephone '' . more general patterns would be '' wireless device '' or '' secondary activity '' , suggesting that a secondary activity ( such as talking on the phone , or inspecting the pockets of your jeans ) should not interfere with other activities . though quite unspecific in its context , the forces in the '' secondary activity '' pattern are very similar to those in '' wireless telephone '' . thus , the competing forces can be seen as part of the essence of a design concept expressed in a pattern . patterns contain their own rationale . usually a pattern contains a rationale referring to some given values . for christopher alexander , it is most important to think about the people who will come in contact with a piece of architecture . one of his key values is making these people feel more alive . he talks about the '' quality without a name '' ( qwan ) . more generally , we could say that a good system should be accepted , welcomed and happily embraced as an enrichment of daily life by those who are meant to use it , or – even better – by all people it affects . for instance , when discussing a street café , alexander discusses the possible desires of a guest , but also mentions people who just walk by . the same thinking can be applied to technical devices such as telephones and cars , to social structures like a team working on a project , or to the user interface of a computer program . the qualities of a software system , for instance , could be rated by observing whether users spend their time enjoying or struggling with the system . by focusing on the impacts on human life , we can identify patterns that are independent from changing technology , and thus find '' timeless quality '' ( alexander ) . generic structure and layout . usually the author of a pattern language or collection chooses a generic structure for all the patterns it contains , breaking each into generic sections like context , problem statement , solution etc . christopher alexander 's patterns , for instance , each consist of a short name , a rating ( up to two ' ' symbols ) , a sensitizing picture , the context description , the problem statement , a longer part of text with examples and explanations , a solution statement , a sketch and further references . this structure and layout is sometimes referred to as the '' alexandrian form '' . alexander uses a special text layout to mark the different sections of his patterns . for instance , the problem statement and the solution statement are printed in bold font , the latter is always preceded by the '' therefore : '' keyword . some authors instead use explicit labels , which creates some degree of redundancy . meaningful names . when design is done by a team , pattern names will form a vocabulary they can share . this makes it necessary for pattern names to be easy to remember and highly descriptive . some examples from alexander 's works are window place ( helps define where windows should go in a room ) and a place to wait ( helps define the characteristics of bus stops and hospital waiting rooms , for example ) . aggregation in an associative network ( pattern language ) . a pattern language , as conceived by alexander , contains links from one pattern to another , so when trying to apply one pattern in a project , a designer is pushed to other patterns that are considered helpful in its context . in alexander 's book , such links are collected in the '' references '' part , and echoed in the linked pattern 's '' context '' part – thus the overall structure is a directed graph . a pattern that is linked to in the '' references '' usually addresses a problem of lower scale , that is suggested as a part of the higher-scale problem . for instance , the '' public outdoor room '' pattern has a reference to '' stair seats '' . even without the pattern description , these links , along with meaningful names , carry a message : when building a place outside where people can spend time ( '' public outdoor room '' ) , consider to surround it by stairs where people can sit ( '' stair seats '' ) . if you are planning an office ( '' workshops and offices '' ) , consider to arrange workspaces in small groups ( '' small working groups '' ) . alexander argues that the connections in the network can be considered even more meaningful than the text of the patterns themselves . the links in alexander 's book clearly result in a hierarchic network . alexander draws a parallel to the hierarchy of a grammar – that is one argument for him to speak of a pattern language . the idea of linking is generally accepted among pattern authors , though the semantic rationale behind the links may vary . some authors , however , like gamma et al . in design patterns , make only little use of pattern linking – possibly because it did not make that much sense for their collection of patterns . in such a case we would speak of a pattern catalogue rather than a pattern language . . usage . alexander encouraged people who used his system to expand his language with patterns of their own . in order to enable this , his books do not focus strictly on architecture or civil engineering ; he also explains the general method of pattern languages . the original concept for the book a pattern language was that it would be published in the form of a 3-ring binder , so that pages could easily be added later ; this proved impractical in publishing . portland urban architecture research laboratory symposium 2009 , presentation by 4 of 6 original authors of a pattern language . the pattern language approach has been used to document expertise in diverse fields . some examples are architectural patterns , computer science patterns , interaction design patterns , pedagogical patterns , pattern gardening , social action patterns , and group facilitation patterns . the pattern language approach has also been recommended as a way to promote civic intelligence by helping to coordinate actions for diverse people and communities who are working together on significant shared problems . for additional discussion of motivation and rationale as well as examples and experiments , see : alexander 's specifications for using pattern languages as well as creating new ones remain influential , and his books are referenced for style by experts in unrelated fields . it is important to note that notations such as uml or the flowchart symbol collection are not pattern languages . they could more closely be compared to an alphabet : their symbols could be used to document a pattern language , but they are not a language by themselves . a recipe or other sequential set of steps to be followed , with only one correct path from start to finish , is also not a pattern language . however , the process of designing a new recipe might benefit from the use of a pattern language . simple example of a pattern . name : chocolatechipratio context : you are baking chocolate chip cookies in small batches for family and friends consider these patterns first : sugarratio , flourratio , eggratio problem : determine the optimum ratio of chocolate chips to cookie dough solution : observe that most people consider chocolate to be the best part of the chocolate chip cookie . also observe that too much chocolate may prevent the cookie from holding together , decreasing its appeal . since you are cooking in small batches , cost is not a consideration . therefore , use the maximum amount of chocolate chips that results in a really sturdy cookie . consider next : nutratio or cookingtime or freezingmethod . origin . christopher alexander , an architect and author , coined the term pattern language . he used it to refer to common problems of the design and construction of buildings and towns and how they should be solved . the solutions proposed in the book include suggestions ranging from how cities and towns should be structured to where windows should be placed in a room . the framework and philosophy of the '' pattern language '' approach was initially popularized in the book a pattern language that was written by christopher alexander and five colleagues at the center for environmental structure in berkeley , california in the late 1970s . while a pattern language contains 253 '' patterns '' from the first pattern , '' independent regions '' ( the most general ) to the last , '' things from your life '' , alexander 's book the timeless way of building goes into more depth about the motivation and purpose of the work . the following definitions of '' pattern '' and '' pattern language '' are paraphrased from a pattern language : '' a pattern is a careful description of a perennial solution to a recurring problem within a building context , describing one of the configurations that brings life to a building . each pattern describes a problem that occurs over and over again in our environment , and then describes the core solution to that problem , in such a way that you can use the solution a million times over , without ever doing it the same way twice . '' a pattern language is a network of patterns that call upon one another . patterns help us remember insights and knowledge about design and can be used in combination to create solutions . application domains . christopher alexander 's idea has been adopted in other disciplines , often much more heavily than the original pattern ( architecture ) as depicted in the book a pattern language . examples since the 1990s include software design patterns in software engineering and , more generally , architectural pattern ( computer science ) , as well as interaction design patterns . since the late 1990s , pedagogical patterns have been used to document good practices in teaching . since at least the mid-2000s , the idea of pattern language was introduced into systems architecture design . the book liberating voices : a pattern language for communication revolution , containing 136 patterns for using information and communication to promote sustainability , democracy and positive social change , was published in 2008 along with a website containing even more patterns . the deck '' group works : a pattern language for bringing life to meetings and other gatherings '' was published in 2011 . the idea of a pattern language has also been applied in permaculture design . ward cunningham , the inventor of wiki , coauthored a paper with michael mehaffy arguing that there are deep relationships between wikis and pattern languages , and that wikis '' were in fact developed as tools to facilitate efficient sharing and modifying of patterns '' . . see also . feng shui method engineering modular design modularity complementary architecture rule of thumb shearing layers systems theory typology ( urban planning and architecture ) . references . further reading . christopher alexander , sara ishikawa , murray silverstein ( 1974 ) . ' a collection of patterns which generate multi-service centres ' in declan and margrit kennedy ( eds . ) : the inner city . architects year book 14 , elek , london . alexander , c . ( 1977 ) . a pattern language : towns , buildings , construction . usa : oxford university press . alexander , c . ( 1979 ) . the timeless way of building . usa : oxford university press . schuler , d . ( 2008 ) . liberating voices : a pattern language for communication revolution . usa : mit press . leitner , helmut ( 2015 ) : pattern theory : introduction and perspectives on the tracks of christopher alexander . external links . about patterns in general . a pattern language for pattern writing by gerard meszaros and jim doble use of patterns for scenario development for large scale aerospace projects lean startup business model pattern what is a quality use case ? from the book patterns for effective use cases . online pattern collections . patternlanguage.com , by the center for environmental structure fused grid – a contemporary urban pattern '' a collection and synthesis of neighbourhood patterns '' hcipatterns.org – patterns for hci the portland pattern repository group works : a pattern language for bringing life to meetings and other gatherings – a pattern language of group process the core protocols – a set of team communication patterns liberating voices ! pattern language project — short versions of patterns available in arabic , chinese , and spanish fi : suunnittelumalli