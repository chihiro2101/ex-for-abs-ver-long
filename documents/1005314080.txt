Iterative and incremental development

overview . , design modifications are made and new functional capabilities are added . the procedure itself consists of the initialization step , the iteration step , and the project control list . the initialization step creates a base version of the system . the goal for this initial implementation is to create a product to which the user can react . it should offer a sampling of the key aspects of the problem and provide a solution that is simple enough to understand and implement easily . to guide the iteration process , a project control list is created that contains a record of all tasks that need to be performed . it includes items such as new features to be implemented and areas of redesign of the existing solution . the control list is constantly being revised as a result of the analysis phase . the iteration involves the redesign and implementation of iteration is to be simple , straightforward , and modular , supporting redesign at that stage or as a task added to the project control list . the level of design detail is not dictated by the iterative approach . in a light-weight iterative project the code may represent the major source of documentation of the system ; however , in a critical iterative project a formal software design document may be used . the analysis of an iteration is based upon user feedback , and the program analysis facilities available . it involves analysis of the structure , modularity , usability , reliability , efficiency , & achievement of goals . the project control list is modified in light of the analysis results . thumb . phases . incremental development slices the system functionality into increments ( portions ) . in each increment , a slice of functionality is delivered through cross discipline work , from the requirements to the deployment . the unified process groups increments/iterations into phases : inception , elaboration , construction , and transition . inception identifies project scope , requirements ( functional and non-functional ) and risks at a high level but in enough detail that work can be estimated . elaboration delivers a working architecture that mitigates the top risks and fulfills the non-functional requirements . construction incrementally fills-in the architecture with production-ready code produced from analysis , design , implementation , and testing of the functional requirements . transition delivers the system into the production operating environment . each of the phases may be divided into 1 or more iterations , which are usually time-boxed rather than feature-boxed . architects and analysts work one iteration ahead of developers and testers to keep their work-product backlog full . usage/history . many examples of early usage are provided in craig larman and victor basili 's article '' iterative and incremental development : a brief history '' , iterative and incremental development : a brief history , craig larman and victor basili , ieee computer , june 2003 with one of the earliest being nasa 's 1960s project mercury . some of those mercury engineers later formed a new division within ibm , where '' another early and striking example of a major iid success was the very heart of nasa ’ s space shuttle software—the primary avionics software system , which they built from 1977 to 1980 . the team applied iid in a series of 17 iterations over 31 months , averaging around eight weeks per iteration . their motivation for avoiding the waterfall life cycle was that the shuttle program ’ s requirements changed during the software development process . '' some organizations , such as the us department of defense , have a preference for iterative methodologies , starting with mil-std-498 '' clearly encouraging evolutionary acquisition and iid '' . the dod instruction 5000.2 released in 2000 stated a clear preference for iid : there are two approaches , evolutionary and single step waterfall , to full capability . an evolutionary approach is preferred . … in this approach , the ultimate capability delivered to the user is divided into two or more blocks , with increasing increments of capability.software development shall follow an iterative spiral development process in which continually expanding software versions are based on learning from earlier development . it can also be done in phases . recent revisions to dodi 5000.02 no longer refer to '' spiral development , '' but do advocate the general approach as a baseline for software-intensive development/procurement programs . in addition , the united states agency for international development ( usaid ) also employs an iterative and incremental developmental approach to its programming cycle to design , monitor , evaluate , learn and adapt international development projects with a project management approach that focuses on incorporating collaboration , learning , and adaptation strategies to iterate and adapt programming . usaid . '' ads chapter 201 program cycle operational policy '' . retrieved april 19 , 2017 . contrast with waterfall development . the main cause of the software development projects failure is the choice of the model , so should be made with a great care . for example , the waterfall development paradigm completes the project-wide work-products of each discipline in one step before moving on to the next discipline in a succeeding step . business value is delivered all at once , and only at the very end of the project , whereas backtracking is possible in an iterative approach . comparing the two approaches , some patterns begin to emerge : user involvement : in the waterfall model , the user is involved in two stages of the model , i.e . requirements and acceptance testing , and possibly creation of user education material . whereas in the incremental model , the client is involved at each and every stage . variability : the software is delivered to the user only after the build stage of the life cycle is completed , for user acceptance testing . on the other hand , every increment is delivered to the user and after the approval of user , the developer is allowed to move towards the next module . human resources : in the incremental model fewer staff are potentially required as compared to the waterfall model . time limitation : an operational product is delivered after months while in the incremental model the product is given to the user within a few weeks . project size : waterfall model is unsuitable for small projects while the incremental model is suitable for small , as well as large projects . implementation guidelines . guidelines that drive software implementation and analysis include : any difficulty in design , coding and testing a modification should signal the need for redesign or re-coding . modifications should fit easily into isolated and easy-to-find modules . if they do not , some redesign is possibly needed . modifications to tables should be especially easy to make . if any table modification is not quickly and easily done , redesign is indicated . modifications should become easier to make as the iterations progress . if they are not , there is a basic problem such as a design flaw or a proliferation of patches . patches should normally be allowed to exist for only one or two iterations . patches may be necessary to avoid redesigning during an implementation phase . the existing implementation should be analyzed frequently to determine how well it measures up to project goals . program analysis facilities should be used whenever available to aid in the analysis of partial implementations . user reaction should be solicited and analyzed for indications of deficiencies in the current implementation . use in hardware and embedded systems . while the term iterative and incremental development got started in the software industry , many hardware and embedded software development efforts are using iterative and incremental techniques . examples of this may be seen in a number of industries . one sector that has recently been substantially affected by this shift of thinking has been the space launch industry , with space launch market competition at work brought about by faster and more extensive technology innovation brought to bear by the formation of private companies pursuing space launch . these companies , such as spacex and rocket lab , are now both providing commercial orbital launch services in the past decade , something that only six nations had done prior to a decade ago . new innovation in technology development approaches , pricing , and service offerings—including the ability that has existed only since 2016 to fly to space on a previously-flown ( reusable ) booster stage—further decreasing the price of obtaining access to space . spacex has been explicit about its effort to bring iterative design practices into the space industry , and uses the technique on spacecraft , launch vehicles , electronics and avionics , and operational flight hardware operations . as the industry has begun to change , other launch competitors are beginning to change their cost-plus contract as well . for example , the large us launch service provider united launch alliance ( ula ) began in 2015 a decade-long project to restructure its launch business—reducing atlas vdelta iv to one—using an iterative and incremental approach to get to a partially-reusable and much lower-cost launch system over the next decade . . see also . adaptive management continuous integration dynamic systems development method goal-driven software development process interaction design kaizen microsoft solutions framework object-oriented analysis and design openup/basic pdca rapid application development release early , release often . notes . references .