Object (computer science)

object-based languages . an important distinction in programming languages is the difference between an object-oriented language and an object-based language . a language is usually considered object-based if it includes the basic capabilities for an object : identity , properties , and attributes . a language is considered object-oriented if it is object-based and also has the capability of polymorphism , inheritance , encapsulation , and , possibly , composition . polymorphism refers to the ability to overload the name of a function with multiple behaviors based on which object ( s ) are passed to it . conventional message passing discriminates only on the first object and considers that to be '' sending a message '' to that object . however , some oop languages such as flavors and the common lisp object system ( clos ) enable discriminating on more than the first parameter of the function . inheritance is the ability to subclass an object class , to create a new class that is a subclass of an existing one and inherits all the data constraints and behaviors of its parents but also adds new and/or changes one or more of them . . object-oriented programming . object-oriented programming is an approach to designing modular reusable software systems . the object-oriented approach is an evolution of good design practices that go back to the very beginning of computer programming . object-orientation is simply the logical extension of older techniques such as structured programming and abstract data types . an object is an abstract data type with the addition of polymorphism and inheritance . rather than structure programs as code and data , an object-oriented system integrates the two using the concept of an '' object '' . an object has state ( data ) and behavior ( code ) . objects can correspond to things found in the real world . so for example , a graphics program will have objects such as circle , square , menu . an online shopping system will have objects such as shopping cart , customer , product . the shopping system will support behaviors such as place order , make payment , and offer discount . the objects are designed as class hierarchies . so for example with the shopping system there might be high level classes such as electronics product , kitchen product , and book . there may be further refinements for example under electronic products : cd player , dvd player , etc . these classes and subclasses correspond to set theory in mathematical logic . . specialized objects . an important concept for objects is the design pattern . a design pattern provides a reusable template to address a common problem . the following object descriptions are examples of some of the most common design patterns for objects . function object : an object with a single method ( in c++ , this method would be the function operator , '' operator ( ) '' ) that acts much like a function ( like a c/c++ pointer to a function ) . immutable object : an object set up with a fixed state at creation time and which does not change afterward . first-class object : an object that can be used without restriction . container object : an object that can contain other objects . factory object : an object whose purpose is to create other objects . metaobject : an object from which other objects can be created ( compare with a class , which is not necessarily an object ) . prototype object : a specialized metaobject from which other objects can be created by copying god object : an object that knows or does too much ( it is an example of an anti-pattern ) . singleton object : an object that is the only instance of its class during the lifetime of the program . filter object : an object that receives a stream of data as its input and transforms it into the object 's output . often the input and output streams are streams of characters , but these also may be streams of arbitrary objects . these are generally used in wrappers since they conceal the existing implementation with the abstraction required at the developer side . distributed objects . the object-oriented approach is not just a programming model . it can be used equally well as an interface definition language for distributed systems . the objects in a distributed computing model tend to be larger grained , longer lasting , and more service-oriented than programming objects . a standard method to package distributed objects is via an interface definition language ( idl ) . an idl shields the client of all of the details of the distributed server object . details such as which computer the object resides on , what programming language it uses , what operating system , and other platform-specific issues . the idl is also usually part of a distributed environment that provides services such as transactions and persistence to all objects in a uniform manner . two of the most popular standards for distributed objects are the object management group 's corba standard and microsoft 's dcom . in addition to distributed objects , a number of other extensions to the basic concept of an object have been proposed to enable distributed computing : protocol objects are components of a protocol stack that enclose network communication within an object-oriented interface . replicated objects are groups of distributed objects ( called replicas ) that run a distributed multi-party protocol to achieve high consistency between their internal states , and that respond to requests in a coordinated way . examples include fault-tolerant corba objects . live distributed objects ( or simply live objects ) ostrowski , k . , birman , k . , dolev , d . , and ahnn , j . ( 2008 ) . '' programming with live distributed objects '' , proceedings of the 22nd european conference on object-oriented programming , paphos , cyprus , july 07–11 , 2008 , j . vitek , ed . , lecture notes in computer science , vol . 5142 , springer-verlag , berlin , heidelberg , 463-489 , generalize the replicated object concept to groups of replicas that might internally use any distributed protocol , perhaps resulting in only a weak consistency between their local states . some of these extensions , such as distributed objects and protocol objects , are domain-specific terms for special types of '' ordinary '' objects used in a certain context ( such as remote method invocation or protocol stack ) . others , such as replicated objects and live distributed objects , are more non-standard , in that they abandon the usual case that an object resides in a single location at a time , and apply the concept to groups of entities ( replicas ) that might span across multiple locations , might have only weakly consistent state , and whose membership might dynamically change . the semantic web . the semantic web is essentially a distributed-objects framework . two key technologies in the semantic web are the web ontology language ( owl ) and the resource description framework ( rdf ) . rdf provides the capability to define basic objects—names , properties , attributes , relations—that are accessible via the internet . owl adds a richer object model , based on set theory , that provides additional modeling capabilities such as multiple inheritance . owl objects are not like standard large-grained distributed objects accessed via an interface definition language . such an approach would not be appropriate for the internet because the internet is constantly evolving and standardization on one set of interfaces is difficult to achieve . owl objects tend to be similar to the kinds of objects used to define application domain models in programming languages such as java and c++ . however , there are important distinctions between owl objects and traditional object-oriented programming objects . traditional objects get compiled into static hierarchies usually with single inheritance , but owl objects are dynamic . an owl object can change its structure at run time and can become an instance of new or different classes . another critical difference is the way the model treats information that is currently not in the system . programming objects and most database systems use the '' closed-world assumption '' . if a fact is not known to the system that fact is assumed to be false . semantic web objects use the open-world assumption , a statement is only considered false if there is actual relevant information that it is false , otherwise it is assumed to be unknown , neither true nor false . owl objects are actually most like objects in artificial intelligence frame languages such as kl-one and loom . the following table contrasts traditional objects from object-oriented programming languages such as java or c++ with semantic web objects : . see also . object lifetime object copy design pattern ( computer science ) business object ( computer science ) actor model . references . external links . what is an object ? from the java tutorials how to merge two or more php objects