Nonblocking minimal spanning switch

background : switching topologies . the crossbar switch . the crossbar switch has the property of being able to connect n inputs to n outputs in any bijection combination , so it can connect any caller to any non-busy receiver , a property given the technical term '' nonblocking '' . being nonblocking it could always complete a call ( to a non-busy receiver ) , which would maximize service availability . however , the crossbar switch does so at the expense of using n 2 ( n squared ) simple spst switches . for large n ( and the practical requirements of a phone switch are considered large ) this growth was too expensive . further , large crossbar switches had physical problems . not only did the switch require too much space , but the metal bars containing the switch contacts would become so long that they would sag and become unreliable . engineers also noticed that at any time , each bar of a crossbar switch was only making a single connection . the other contacts on the two bars were unused . this seemed to imply that most of the switching fabric of a crossbar switch was wasted . the obvious way to emulate a crossbar switch was to find some way to build it from smaller crossbar switches . if a crossbar switch could be emulated by some arrangement of smaller crossbar switches , then these smaller crossbar switches could also , in turn be emulated by even smaller crossbar switches . the switching fabric could become very efficient , and possibly even be created from standardized parts . this is called a clos network . completely connected 3-layer switches . the next approach was to break apart the crossbar switch into three layers of smaller crossbar switches . there would be an '' input layer '' , a '' middle layer '' and an '' output layer . '' the smaller switches are less massive , more reliable , and generally easier to build , and therefore less expensive . a telephone system only has to make a one-to-one connection . intuitively this seems to mean that the number of inputs and the number of outputs can always be equal in each subswitch , but intuition does not prove this can be done nor does it tell us how to do so . suppose we want to synthesize a 16 by 16 crossbar switch . the design could have 4 subswitches on the input side , each with 4 inputs , for 16 total inputs . further , on the output side , we could also have 4 output subswitches , each with 4 outputs , for a total of 16 outputs . it is desirable that the design use as few wires as possible , because wires cost real money . the least possible number of wires that can connect two subswitches is a single wire . so , each input subswitch will have a single wire to each middle subswitch . also , each middle subswitch will have a single wire to each output subswitch . the question is how many middle subswitches are needed , and therefore how many total wires should connect the input layer to the middle layer . since telephone switches are symmetric ( callers and callees are interchangeable ) , the same logic will apply to the output layer , and the middle subswitches will be '' square '' , having the same number of inputs as outputs . the number of middle subswitches depends on the algorithm used to allocate connection to them . the basic algorithm for managing a three-layer switch is to search the middle subswitches for a middle subswitch that has unused wires to the needed input and output switches . once a connectible middle subswitch is found , connecting to the correct inputs and outputs in the input and output switches is trivial . theoretically , in the example , only four central switches are needed , each with exactly one connection to each input switch and one connection to each output switch . this is called a '' minimal spanning switch , '' and managing it was the holy grail of the bell labs ' investigations . however , a bit of work with a pencil and paper will show that it is easy to get such a minimal switch into conditions in which no single middle switch has a connection to both the needed input switch and the needed output switch . it only takes four calls to partially block the switch . if an input switch is half-full , it has connections via two middle switches . if an output switch is also half full with connections from the other two middle switches , then there is no remaining middle switch which can provide a path between that input and output . for this reason , a '' simply connected nonblocking switch '' 16x16 switch with four input subswitches and four output switches was thought to require 7 middle switches ; in the worst case an almost-full input subswitch would use three middle switches , an almost-full output subswitch would use three different ones , and the seventh would be guaranteed to be free to make the last connection . for this reason , sometimes this switch arrangement is called a '' 2n & minus ; 1 switch '' , where n is the number of input ports of the input subswitches . the example is intentionally small , and in such a small example , the reorganization does not save many switches . a 16 & times ; 16 crossbar has 256 contacts , while a 16 & times ; 16 minimal spanning switch has 4 & times ; 4 & times ; 4 & times ; 3 192 contacts . as the numbers get larger , the savings increase . for example , a 10,000 line exchange would need 100 million contacts to implement a full crossbar . but three layers of 100 100 & times ; 100 subswitches would use only 300 10,000 contact subswitches , or 3 million contacts . those subswitches could in turn each be made of 3 & times ; 10 10 & times ; 10 crossbars , a total of 3000 contacts , making 900,000 for the whole exchange ; that is a far smaller number than 100 million . managing a minimal spanning switch . the crucial discovery was a way to reorganize connections in the middle switches to '' trade wires '' so that a new connection could be completed . the first step is to find an unused link from the input subswitch to a middle-layer subswitch ( which we shall call a ) , and an unused link from a middle-layer subswitch ( which we shall call b ) to the desired output subswitch . since , prior to the arrival of the new connection , the input and output subswitches each had at least one unused connection , both of these unused links must exist . if a and b happen to be the same middle-layer switch , then the connection can be made immediately just as in the '' 2nâˆ’1 '' switch case . however , if a and b are different middle-layer subswitches , more work is required . the algorithm finds a new arrangement of the connections through the middle subswitches a and b which includes all of the existing connections , plus the desired new connection . make a list of all of the desired connections that pass through a or b . that is , all of the existing connections to be maintained and the new connection . the algorithm proper only cares about the internal connections from input to output switch , although a practical implementation also has to keep track of the correct input and output switch connections . in this list , each input subswitch can appear in at most two connections : one to subswitch a , and one to subswitch b . the options are zero , one , or two . likewise , each output subswitch appears in at most two connections . each connection is linked to at most two others by a shared input or output subswitch , forming one link in a '' chain '' of connections . next , begin with the new connection . assign it the path from its input subswitch , through middle subswitch a , to its output subswitch . if this first connection 's output subswitch has a second connection , assign that second connection a path from its input subswitch through subswitch b . if that input subswitch has another connection , assign that third connection a path through subswitch a . continue back and forth in this manner , alternating between middle subswitches a and b . eventually one of two things must happen : the chain terminates in a subswitch with only one connection , or the chain loops back to the originally chosen connection . in the first case , go back to the new connection 's input subswitch and follow its chain backward , assigning connections to paths through middle subswitches b and a in the same alternating pattern . when this is done , each input or output subswitch in the chain has at most two connections passing through it , and they are assigned to different middle switches . thus , all the required links are available . there may be additional connections through subswitches a and b which are not part of the chain including the new connection ; those connections may be left as-is . after the new connection pattern is designed in the software , then the electronics of the switch can actually be reprogrammed , physically moving the connections . the electronic switches are designed internally so that the new configuration can be written into the electronics without disturbing the existing connection , and then take effect with a single logic pulse . the result is that the connection moves instantaneously , with an imperceptible interruption to the conversation . in older electromechanical switches , one occasionally heard a clank of '' switching noise . '' this algorithm is a form of topological sort , and is the heart of the algorithm that controls a minimal spanning switch . practical implementations of switches . as soon as the algorithm was discovered , bell system engineers and managers began discussing it . after several years , bell engineers began designing electromechanical switches that could be controlled by it . at the time , computers used tubes and were not reliable enough to control a phone system ( phone system switches are safety-critical , and they are designed to have an unplanned failure about once per thirty years ) . relay-based computers were too slow to implement the algorithm . however , the entire system could be designed so that when computers were reliable enough , they could be retrofitted to existing switching systems . it 's not difficult to make composite switches fault-tolerant . when a subswitch fails , the callers simply redial . so , on each new connection , the software tries the next free connection in each subswitch rather than reusing the most recently released one . the new connection is more likely to work because it uses different circuitry . therefore , in a busy switch , when a particular pcb lacks any connections , it is an excellent candidate for testing . to test or remove a particular printed circuit card from service , there is a well-known algorithm . as fewer connections pass through the card 's subswitch , the software routes more test signals through the subswitch to a measurement device , and then reads the measurement . this does not interrupt old calls , which remain working . if a test fails , the software isolates the exact circuit board by reading the failure from several external switches . it then marks the free circuits in the failing circuitry as busy . as calls using the faulty circuitry are ended , those circuits are also marked busy . some time later , when no calls pass through the faulty circuitry , the computer lights a light on the circuit board that needs replacement , and a technician can replace the circuit board . shortly after replacement , the next test succeeds , the connections to the repaired subswitch are marked '' not busy , '' and the switch returns to full operation . the diagnostics on bell 's early electronic switches would actually light a green light on each good printed circuit board , and light a red light on each failed printed circuit board . the printed circuits were designed so that they could be removed and replaced without turning off the whole switch . the eventual result was the bell 1ess . this was controlled by a cpu called the central control ( cc ) , a lock-step , harvard architecture dual computer using reliable diodeâ€“transistor logic . in the 1ess cpu , two computers performed each step , checking each other . when they disagreed , they would diagnose themselves , and the correctly running computer would take up switch operation while the other would disqualify itself and request repair . the 1ess switch was still in limited use as of 2012 , and had a verified reliability of less than one unscheduled hour of failure in each thirty years of operation , validating its design . initially it was installed on long distance trunks in major cities , the most heavily used parts of each telephone exchange . on the first mother 's day that major cities operated with it , the bell system set a record for total network capacity , both in calls completed , and total calls per second per switch . this resulted in a record for total revenue per trunk . digital switches . a practical implementation of a switch can be created from an odd number of layers of smaller subswitches . conceptually , the crossbar switches of the three-stage switch can each be further decomposed into smaller crossbar switches . although each subswitch has limited multiplexing capability , working together they synthesize the effect of a larger n & times ; n crossbar switch . in a modern digital telephone switch , application of two different multiplexer approaches in alternate layers further reduces the cost of the switching fabric : space-division multiplexers are something like the crossbar switches already described , or some arrangement of crossover switches or banyan switches . any single output can select from any input . in digital switches , this is usually an arrangement of and gates . 8000 times per second , the connection is reprogrammed to connect particular wires for the duration of a time slot . design advantage : in space-division systems the number of space-division connections is divided by the number of time slots in the time-division multiplexing system . this dramatically reduces the size and expense of the switching fabric . it also increases the reliability , because there are far fewer physical connections to fail . time-slot interchanges each have a memory which is read in a fixed order and written in a programmable order ( or vice versa ) . this type of switch permutes time-slots in a time-division multiplexing that goes to the space-division multiplexers in its adjacent layers . design advantage : time-division switches have only one input and output wire . since they have far fewer electrical connections to fail , they are far more reliable than space-division switches , and are therefore the preferred switches for the outer ( input and output ) layers of modern telephone switches . practical digital telephonic switches minimize the size and expense of the electronics . first , it is typical to '' fold '' the switch , so that both the input and output connections to a subscriber-line are handled by the same control logic . then , a time-division switch is used in the outer layer . the outer layer is implemented in subscriber-line interface cards ( slics ) in the local presence street-side boxes . under remote control from the central switch , the cards connect to timing-slots in a time-multiplexed line to a central switch . in the u.s . the multiplexed line is a multiple of a t-1 line . in europe and many other countries it is a multiple of an e-1 line . the scarce resources in a telephone switch are the connections between layers of subswitches . these connections can be either time slots or wires , depending on the type of multiplexing . the control logic has to allocate these connections , and the basic method is the algorithm already discussed . the subswitches are logically arranged so that they synthesize larger subswitches . each subswitch , and synthesized subswitch is controlled ( recursion ) by logic derived from clos 's mathematics . the computer code decomposes larger multiplexers into smaller multiplexers . if the recursion is taken to the limit , breaking down the crossbar to the minimum possible number of switching elements , the resulting device is sometimes called a crossover switch or a banyan switch depending on its topology . switches typically interface to other switches and fiber optic networks via fast multiplexed data lines such as sonet . each line of a switch may be periodically tested by the computer , by sending test data through it . if a switch 's line fails , all lines of a switch are marked as in use . multiplexer lines are allocated in a first-in-first out way , so that new connections find new switch elements . when all connections are gone from a defective switch , the defective switch can be avoided , and later replaced . as of 2018 , such switches are no longer made . they are being replaced by high-speed internet protocol routers . example of rerouting a switch . left thumb