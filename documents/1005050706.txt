Distributed hash table

history . dht research was originally motivated , in part , by peer-to-peer ( p2p ) systems such as freenet , gnutella , bittorrent and napster , which took advantage of resources distributed across the internet to provide a single useful application . in particular , they took advantage of increased bandwidth and hard disk capacity to provide a file-sharing service . these systems differed in how they located the data offered by their peers . napster , the first large-scale p2p content delivery system , required a central index server : each node , upon joining , would send a list of locally held files to the server , which would perform searches and refer the queries to the nodes that held the results . this central component left the system vulnerable to attacks and lawsuits . gnutella and similar networks moved to a query flooding model in essence , each search would result in a message being broadcast to every other machine in the network . while avoiding a single point of failure , this method was significantly less efficient than napster . later versions of gnutella clients moved to a dynamic querying model which vastly improved efficiency . freenet is fully distributed , but employs a heuristic key-based routing in which each file is associated with a key , and files with similar keys tend to cluster on a similar set of nodes . queries are likely to be routed through the network to such a cluster without needing to visit many peers . however , freenet does not guarantee that data will be found . distributed hash tables use a more structured key-based routing in order to attain both the decentralization of freenet and gnutella , and the efficiency and guaranteed results of napster . one drawback is that , like freenet , dhts only directly support exact-match search , rather than keyword search , although freenet 's routing algorithm can be generalized to any key type where a closeness operation can be defined . in 2001 , four systems & mdash ; can , chord , hari balakrishnan , m . frans kaashoek , david karger , robert morris , and ion stoica . looking up data in p2p systems . in communications of the acm , february 2003 . pastry , and tapestry & mdash ; ignited dhts as a popular research topic . a project called the infrastructure for resilient internet systems ( iris ) was funded by a 12 million grant from the united states national science foundation in 2002 . researchers included sylvia ratnasamy , ion stoica , hari balakrishnan and scott shenker . outside academia , dht technology has been adopted as a component of bittorrent and in the coral content distribution network . properties . dhts characteristically emphasize the following properties : decentralized computing : the nodes collectively form the system without any central coordination . fault tolerance : the system should be reliable ( in some sense ) even with nodes continuously joining , leaving , and failing . scalability : the system should function efficiently even with thousands or millions of nodes . a key technique used to achieve these goals is that any one node needs to coordinate with only a few other nodes in the system – most commonly , o ( log n ) of the n participants ( see below ) – so that only a limited amount of work needs to be done for each change in membership . some dht designs seek to be secure against malicious participants guido urdaneta , guillaume pierre and maarten van steen . a survey of dht security techniques . acm computing surveys 43 ( 2 ) , january 2011 . and to allow participants to remain anonymity , though this is less common than in many other peer-to-peer ( especially file sharing ) systems ; see anonymous p2p . finally , dhts must deal with more traditional distributed systems issues such as load balancing , data integrity , and performance ( in particular , ensuring that operations such as routing and data storage or retrieval complete quickly ) . structure . the structure of a dht can be decomposed into several main components . moni naor and udi wieder . novel architectures for p2p applications : the continuous-discrete approach . proc . spaa , 2003 . gurmeet singh manku . dipsea : a modular distributed hash table . ph . d . thesis ( stanford university ) , august 2004 . the foundation is an abstract keyspace , such as the set of 160-bit strings . a keyspace partitioning scheme splits ownership of this keyspace among the participating nodes . an overlay network then connects the nodes , allowing them to find the owner of any given key in the keyspace . once these components are in place , a typical use of the dht for storage and retrieval might proceed as follows . suppose the keyspace is the set of 160-bit strings . to index a file with given and in the dht , the sha-1 hash of is generated , producing a 160-bit key , and a message is sent to any node participating in the dht . the message is forwarded from node to node through the overlay network until it reaches the single node responsible for key as specified by the keyspace partitioning . that node then stores the key and the data . any other client can then retrieve the contents of the file by again hashing to produce and asking any dht node to find the data associated with with a message . the message will again be routed through the overlay to the node responsible for , which will reply with the stored . the keyspace partitioning and overlay network components are described below with the goal of capturing the principal ideas common to most dhts ; many designs differ in the details . keyspace partitioning . most dhts use some variant of consistent hashing or rendezvous hashing to map keys to nodes . the two algorithms appear to have been devised independently and simultaneously to solve the distributed hash table problem . both consistent hashing and rendezvous hashing have the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent ids , and leaves all other nodes unaffected . contrast this with a traditional hash table in which addition or removal of one bucket causes nearly the entire keyspace to be remapped . since any change in ownership typically corresponds to bandwidth-intensive movement of objects stored in the dht from one node to another , minimizing such reorganization is required to efficiently support high rates of churn ( node arrival and failure ) . consistent hashing . consistent hashing employs a function \delta ( k_1 , k_2 ) that defines an abstract notion of the distance between the keys k_1 and k_2 , which is unrelated to geographical distance or network latency . each node is assigned a single key called its identifier ( id ) . a node with id i_x owns all the keys k_m for which i_x is the closest id , measured according to \delta ( k_m , i_x ) . for example , the chord dht uses consistent hashing , which treats nodes as points on a circle , and \delta ( k_1 , k_2 ) is the distance traveling clockwise around the circle from k_1 to k_2 . thus , the circular keyspace is split into contiguous segments whose endpoints are the node identifiers . if i_1 and i_2 are two adjacent ids , with a shorter clockwise distance from i_1 to i_2 , then the node with id i_2 owns all the keys that fall between i_1 and i_2 . rendezvous hashing . in rendezvous hashing , also called highest random weight ( hrw ) hashing , all clients use the same hash function h ( ) ( chosen ahead of time ) to associate a key to one of the n available servers . each client has the same list of identifiers the most common choice , o ( \log n ) degree/route length , is not optimal in terms of degree/route length tradeoff , but such topologies typically allow more flexibility in choice of neighbors . many dhts use that flexibility to pick neighbors that are close in terms of latency in the physical underlying network . in general , all dhts construct navigable small-world network topologies , which trade-off route length vs . network degree . maximum route length is closely related to diameter : the maximum number of hops in any shortest path between nodes . clearly , the network 's worst case route length is at least as large as its diameter , so dhts are limited by the degree/diameter tradeoff that is fundamental in graph theory . route length can be greater than diameter , since the greedy routing algorithm may not find shortest paths . gurmeet singh manku , moni naor , and udi wieder . '' know thy neighbor 's neighbor : the power of lookahead in randomized p2p networks '' . proc . stoc , 2004 . . algorithms for overlay networks . aside from routing , there exist many algorithms that exploit the structure of the overlay network for sending a message to all nodes , or a subset of nodes , in a dht . ali ghodsi . '' distributed k-ary system : algorithms for distributed hash tables '' , . kth-royal institute of technology , 2006 . these algorithms are used by applications to do overlay multicast , range queries , or to collect statistics . two systems that are based on this approach are structella , which implements flooding and random walks on a pastry overlay , and dq-dht , which implements a dynamic querying search algorithm over a chord network . . security . because of the decentralization , fault tolerance , and scalability of dhts , they are inherently more resilient against a hostile attacker than a centralized system . open systems for distributed data storage that are robust against massive hostile attackers are feasible . baruch awerbuch , christian scheideler . '' towards a scalable and robust dht '' . 2006 . a dht system that is carefully designed to have byzantine fault tolerance can defend against a security weakness , known as the sybil attack , which affects all current dht designs . maxwell young ; aniket kate ; ian goldberg ; martin karsten . '' practical robust communication in dhts tolerating a byzantine adversary '' . natalya fedotova ; giordano orzetti ; luca veltri ; alessandro zaccagnini . '' byzantine agreement for reputation management in dht-based peer-to-peer networks '' . petar maymounkov , one of the original authors of kademlia , has proposed a way to circumvent the weakness to the sybil attack by incorporating social trust relationships into the system design . the new system , codenamed tonika or also known by its domain name as 5ttt , is based on an algorithm design known as '' electric routing '' and co-authored with the mathematician jonathan kelner . maymounkov has now undertaken a comprehensive implementation effort of this new system . however , research into effective defences against sybil attacks is generally considered an open question , and wide variety of potential defences are proposed every year in top security research conferences . implementations . most notable differences encountered in practical instances of dht implementations include at least the following : the address space is a parameter of dht . several real-world dhts use 128-bit or 160-bit key space . some real-world dhts use hash functions other than sha-1 . in the real world the key could be a hash of a file 's content rather than a hash of a file 's name to provide content-addressable storage , so that renaming of the file does not prevent users from finding it . some dhts may also publish objects of different types . for example , key could be the node and associated data could describe how to contact this node . this allows publication-of-presence information and often used in im applications , etc . in the simplest case , is just a random number that is directly used as key ( so in a 160-bit dht will be a 160-bit number , usually randomly chosen ) . in some dhts , publishing of nodes ' ids is also used to optimize dht operations . redundancy can be added to improve reliability . the key pair can be stored in more than one node corresponding to the key . usually , rather than selecting just one node , real world dht algorithms select suitable nodes , with being an implementation-specific parameter of the dht . in some dht designs , nodes agree to handle a certain keyspace range , the size of which may be chosen dynamically , rather than hard-coded . some advanced dhts like kademlia perform iterative lookups through the dht first in order to select a set of suitable nodes and send messages only to those nodes , thus drastically reducing useless traffic , since published messages are only sent to nodes that seem suitable for storing the key ; and iterative lookups cover just a small set of nodes rather than the entire dht , reducing useless forwarding . in such dhts , forwarding of messages may only occur as part of a self-healing algorithm : if a target node receives a message , but believes that is out of its handled range and a closer node ( in terms of dht keyspace ) is known , the message is forwarded to that node . otherwise , data are indexed locally . this leads to a somewhat self-balancing dht behavior . of course , such an algorithm requires nodes to publish their presence data in the dht so the iterative lookups can be performed . since on most machines sending messages is much more expensive than local hash table accesses , it makes sense to bundle many messages concerning a particular node into a single batch . assuming each node has a local batch consisting of at most operations , the bundling procedure is as follows . each node first sorts its local batch by the identifier of the node responsible for the operation . using bucket sort , this can be done in , where is the number of nodes in the dht . when there are multiple operations addressing the same key within one batch , the batch is condensed before being sent out . for example , multiple lookups of the same key can be reduced to one or multiple increments can be reduced to a single add operation . this reduction can be implemented with the help of a temporary local hash table . finally , the operations are sent to the respective nodes . . examples . dht protocols and implementations . apache cassandra baton overlay mainline dht – standard dht used by bittorrent ( based on kademlia as provided by khashmir ) tribler wiki retrieved january 2010 . content addressable network ( can ) chord koorde kademlia pastry p-grid riak tapestry tomp2p voldemort . applications using dhts . btdigg : bittorrent dht search engine codeen : web caching coral content distribution network freenet : a censorship-resistant anonymous network glusterfs : a distributed file system used for storage virtualization gnunet : freenet-like distribution network including a dht implementation i2p : an open-source anonymous peer-to-peer network i2p : serverless secure anonymous email ipfs : a content-addressable , peer-to-peer hypermedia distribution protocol jxta : open-source p2p platform oracle coherence : an in-memory data grid built on top of a java dht implementation perfect dark : a peer-to-peer file-sharing application from japan retroshare : a friend-to-friend network retroshare faq retrieved december 2011 jami : a privacy-preserving voice , video and chat communication platform , based on a kademlia-like dht tox : an instant messaging system intended to function as a skype replacement twister : a microblogging peer-to-peer platform yacy : a distributed search engine