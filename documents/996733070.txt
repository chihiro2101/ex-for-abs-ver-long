Scalable Coherent Interface

history . soon after the fastbus ( ieee 960 ) follow-on futurebus ( ieee 896 ) project in 1987 , some engineers predicted it would already be too slow for the high performance computing marketplace by the time it would be released in the early 1990s . in response , a '' superbus '' study group was formed in november 1987 . another working group of the standards association of the institute of electrical and electronics engineers ( ieee ) spun off to form a standard targeted at this market in july 1988 . it was essentially a subset of futurebus features that could be easily implemented at high speed , along with minor additions to make it easier to connect to other systems , such as vmebus . most of the developers had their background from high-speed computer buses . representatives from companies in the computer industry and research community included amdahl , apple computer , bb & n , hewlett-packard , cern , dolphin server technology , cray research , sequent , at & t , digital equipment corporation , mcdonnell douglas , national semiconductor , stanford linear accelerator center , tektronix , texas instruments , unisys , university of oslo , university of wisconsin . the original intent was a single standard for all buses in the computer . the working group soon came up with the idea of using point-to-point communication in the form of insertion rings . this avoided the lumped capacitance , limited physical length/speed of light problems and stub reflections in addition to allowing parallel transactions . the use of insertion rings is credited to manolis katevenis who suggested it at one of the early meetings of the working group . the working group for developing the standard was led by david b . gustavson ( chair ) and david v . james ( vice chair ) . david v . james was a major contributor for writing the specifications including the executable c-code . stein gjessing ’ s group at the university of oslo used formal methods to verify the coherence protocol and dolphin server technology implemented a node controller chip including the cache coherence logic . different versions and derivatives of sci were implemented by companies like dolphin interconnect solutions , convex , data general aviion ( using cache controller and link controller chips from dolphin ) , sequent and cray research . dolphin interconnect solutions implemented a pci and pci-express connected derivative of sci that provides non-coherent shared memory access . this implementation was used by sun microsystems for its high-end clusters , thales group and several others including volume applications for message passing within hpc clustering and medical imaging . sci was often used to implement non-uniform memory access architectures . it was also used by sequent computer systems as the processor memory bus in their numa-q systems . numascale developed a derivative to connect with coherent hypertransport . the standard . the standard defined two interface levels : the physical level that deals with electrical signals , connectors , mechanical and thermal conditions the logical level that describes the address space , data transfer protocols , cache coherence mechanisms , synchronization primitives , control and status registers , and initialization and error recovery facilities . this structure allowed new developments in physical interface technology to be easily adapted without any redesign on the logical level . scalability for large systems is achieved through a distributed directory-based cache coherence model . ( the other popular models for cache coherency are based on system-wide eavesdropping ( snooping ) of memory transactions – a scheme which is not very scalable . ) in sci each node contains a directory with a pointer to the next node in a linked list that shares a particular cache line . sci defines a 64-bit flat address space ( 16 exabytes ) where 16 bits are used for identifying a node ( 65,536 nodes ) and 48 bits for address within the node ( 256 terabytes ) . a node can contain many processors and/or memory . the sci standard defines a packet switched network . topologies . sci can be used to build systems with different types of switching topologies from centralized to fully distributed switching : with a central switch , each node is connected to the switch with a ringlet ( in this case a two-node ring ) . in distributed switching systems , each node can be connected to a ring of arbitrary length and either all or some of the nodes can be connected to two or more rings . the most common way to describe these multi-dimensional topologies is k-ary n-cubes ( or tori ) . the sci standard specification mentions several such topologies as examples . the 2-d torus is a combination of rings in two dimensions . switching between the two dimensions requires a small switching capability in the node . this can be expanded to three or more dimensions . the concept of folding rings can also be applied to the torus topologies to avoid any long connection segments . transactions . sci sends information in packets . each packet consists of an unbroken sequence of 16-bit symbols . the symbol is accompanied by a flag bit . a transition of the flag bit from 0 to 1 indicates the start of a packet . a transition from 1 to 0 occurs 1 ( for echoes ) or 4 symbols before the packet end . a packet contains a header with address command and status information , payload ( from 0 through optional lengths of data ) and a crc check symbol . the first symbol in the packet header contains the destination node address . if the address is not within the domain handled by the receiving node , the packet is passed to the output through the bypass fifo . in the other case , the packet is fed to a receive queue and may be transferred to a ring in another dimension . all packets are marked when they pass the scrubber ( a node is established as scrubber when the ring is initialized ) . packets without a valid destination address will be removed when passing the scrubber for the second time to avoid filling the ring with packets that would otherwise circulate indefinitely . cache coherence . cache coherence ensures data consistency in multiprocessor systems . the simplest form applied in earlier systems was based on clearing the cache contents between context switches and disabling the cache for data that were shared between two or more processors . these methods were feasible when the performance difference between the cache and memory were less than one order of magnitude . modern processors with caches that are more than two orders of magnitude faster than main memory would not perform anywhere near optimal without more sophisticated methods for data consistency . bus based systems use eavesdropping ( snooping ) methods since buses are inherently broadcast . modern systems with point-to point links use broadcast methods with snoop filter options to improve performance . since broadcast and eavesdropping are inherently non-scalable , these are not used in sci . instead , sci uses a distributed directory-based cache coherence protocol with a linked list of nodes containing processors that share a particular cache line . each node holds a directory for the main memory of the node with a tag for each line of memory ( same line length as the cache line ) . the memory tag holds a pointer to the head of the linked list and a state code for the line ( three states – home , fresh , gone ) . associated with each node is also a cache for holding remote data with a directory containing forward and backward pointers to nodes in the linked list sharing the cache line . the tag for the cache has seven states ( invalid , only fresh , head fresh , only dirty , head dirty , mid valid , tail valid ) . the distributed directory is scalable . the overhead for the directory based cache coherence is a constant percentage of the node ’ s memory and cache . this percentage is in the order of 4 % for the memory and 7 % for the cache . legacy . sci is a standard for connecting the different resources within a multiprocessor computer system , and it is not as widely known to the public as for example the ethernet family for connecting different systems . different system vendors implemented different variants of sci for their internal system infrastructure . these different implementations interface to very intricate mechanisms in processors and memory systems and each vendor has to preserve some degrees of compatibility for both hardware and software . gustavson led a group called the scalable coherent interface and serial express users , developers , and manufacturers association and maintained a web site for the technology starting in 1996 . a series of workshops were held through 1999 . after the first 1992 edition , follow-on projects defined shared data formats in 1993 , a version using low-voltage differential signaling in 1996 , and a memory interface known as ramlink later in 1996 . in january 1998 , the sldram corporation was formed to hold patents on an attempt to define a new memory interface that was related to another working group called serialexpress or local area memory port . however , by early 1999 the new memory standard was abandoned . in 1999 a series of papers was published as a book on sci . an updated specification was published in july 2000 by the international electrotechnical commission ( iec ) of the international organization for standardization ( iso ) as iso/iec 13961 . . see also . dolphin interconnect solutions list of device bandwidths numalink quickring hippi ieee 1355 rapidio myrinet qsnet futurebus infiniband