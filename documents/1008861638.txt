Transport Layer Security

description . client-server applications use the tls protocol to communicate across a network in a way designed to prevent eavesdropping and tampering . since applications can communicate either with or without tls ( or ssl ) , it is necessary for the client to indicate to the server the setup of a tls connection . one of the main ways of achieving this is to use a different port number for tls connections , for example port 443 for https . another mechanism is for the client to make a protocol-specific request to the server to switch the connection to tls ; for example , by making a starttls request when using the mail and news protocols . once the client and server have agreed to use tls , they negotiate a stateful connection by using a handshaking procedure . '' ssl/tls in detail '' . microsoft technet . updated july 30 , 2003 . the protocols use a handshake with an asymmetric cipher to establish not only cipher settings but also a session-specific shared key with which further communication is encrypted using a symmetric cipher . during this handshake , the client and server agree on various parameters used to establish the connection 's security : the handshake begins when a client connects to a tls-enabled server requesting a secure connection and the client presents a list of supported cipher suites ( ciphers and hash functions ) . from this list , the server picks a cipher and hash function that it also supports and notifies the client of the decision . the server usually then provides identification in the form of a digital certificate . the certificate contains the hostname , the trusted certificate authority ( ca ) that vouches for the authenticity of the certificate , and the server 's public encryption key . the client confirms the validity of the certificate before proceeding . to generate the session keys used for the secure connection , the client either : encrypts a random number with the server 's public key and sends the result to the server ( which only the server should be able to decrypt with its private key ) ; both parties then use the random number to generate a unique session key for subsequent encryption and decryption of data during the session uses diffieâ€“hellman key exchange to securely generate a random and unique session key for encryption and decryption that has the additional property of forward secrecy : if the server 's private key is disclosed in future , it can not be used to decrypt the current session , even if the session is intercepted and recorded by a third party . this concludes the handshake and begins the secured connection , which is encrypted and decrypted with the session key until the connection closes . if any one of the above steps fails , then the tls handshake fails and the connection is not created . tls and ssl do not fit neatly into any single layer of the osi model or the tcp/ip model . tls runs '' on top of some reliable transport protocol ( e.g . , tcp ) , '' which would imply that it is above the transport layer . it serves encryption to higher layers , which is normally the function of the presentation layer . however , applications generally use tls as if it were a transport layer , even though applications using tls must actively control initiating tls handshakes and handling of exchanged authentication certificates . . history and development . ; length : length of application data ( excluding the protocol header and including the mac and padding trailers ) ; mac : 32 bytes for the sha-256-based hmac , 20 bytes for the sha-1-based hmac , 16 bytes for the md5-based hmac . ; padding : variable length ; last byte contains the padding length . support for name-based virtual servers . from the application protocol point of view , tls belongs to a lower layer , although the tcp/ip model is too coarse to show it . this means that the tls handshake is usually ( except in the starttls case ) performed before the application protocol can start . in the name-based virtual server feature being provided by the application layer , all co-hosted virtual servers share the same certificate because the server has to select and send a certificate immediately after the clienthello message . this is a big problem in hosting environments because it means either sharing the same certificate among all customers or using a different ip address for each of them . there are two known workarounds provided by x.509 : if all virtual servers belong to the same domain , a wildcard certificate can be used . besides the loose host name selection that might be a problem or not , there is no common agreement about how to match wildcard certificates . different rules are applied depending on the application protocol or software used . add every virtual host name in the subjectaltname extension . the major problem being that the certificate needs to be reissued whenever a new virtual server is added . to provide the server name , transport layer security ( tls ) extensions allow clients to include a server name indication extension ( sni ) in the extended clienthello message . this extension hints to the server immediately which name the client wishes to connect to , so the server can select the appropriate certificate to send to the clients . also documents a method to implement name-based virtual hosting by upgrading http to tls via an http/1.1 upgrade header . normally this is to securely implement http over tls within the main '' http '' uri scheme ( which avoids forking the uri space and reduces the number of used ports ) , however , few implementations currently support this . standards . primary standards . the current approved version of tls is version 1.3 , which is specified in : : '' the transport layer security ( tls ) protocol version 1.3 '' . the current standard replaces these former versions , which are now considered obsolete : : '' the tls protocol version 1.0 '' . : '' the transport layer security ( tls ) protocol version 1.1 '' . : '' the transport layer security ( tls ) protocol version 1.2 '' . as well as the never standardized ssl 2.0 and 3.0 , which are considered obsolete : //tools.ietf.org/html/draft-hickman-netscape-ssl-00 internet draft ( 1995 ) , ssl version 2.0 : '' the secure sockets layer ( ssl ) protocol version 3.0 '' . extensions . other rfcs subsequently extended tls . extensions to tls 1.0 include : : '' using tls with imap , pop3 and acap '' . specifies an extension to the imap , pop3 and acap services that allow the server and client to use transport-layer security to provide private , authenticated communication over the internet . : '' addition of kerberos cipher suites to transport layer security ( tls ) '' . the 40-bit cipher suites defined in this memo appear only for the purpose of documenting the fact that those cipher suite codes have already been assigned . : '' upgrading to tls within http/1.1 '' , explains how to use the http/1.1 upgrade header to initiate transport layer security ( tls ) over an existing tcp connection . this allows unsecured and secured http traffic to share the same well known port ( in this case , http : at 80 rather than https : at 443 ) . : '' http over tls '' , distinguishes secured traffic from insecure traffic by the use of a different 'server port ' . : '' smtp service extension for secure smtp over transport layer security '' . specifies an extension to the smtp service that allows an smtp server and client to use transport-layer security to provide private , authenticated communication over the internet . : '' aes ciphersuites for tls '' . adds advanced encryption standard ( aes ) cipher suites to the previously existing symmetric ciphers . : '' transport layer security ( tls ) extensions '' , adds a mechanism for negotiating protocol extensions during session initialisation and defines some extensions . made obsolete by . : '' transport layer security protocol compression methods '' , specifies the framework for compression methods and the deflate compression method . : '' transport layer security ( tls ) protocol compression using lempel-ziv-stac ( lzs ) '' . : '' addition of camellia cipher suites to transport layer security ( tls ) '' . : '' addition of seed cipher suites to transport layer security ( tls ) '' . : '' securing ftps '' . : '' pre-shared key ciphersuites for transport layer security ( tls ) '' , adds three sets of new cipher suites for the tls protocol to support authentication based on pre-shared keys . extensions to tls 1.1 include : : '' datagram transport layer security '' specifies a tls variant that works over datagram protocols ( such as udp ) . : '' transport layer security ( tls ) extensions '' describes both a set of specific extensions and a generic extension mechanism . : '' elliptic curve cryptography ( ecc ) cipher suites for transport layer security ( tls ) '' . : '' tls handshake message for supplemental data '' . : '' tls user mapping extension '' . : '' pre-shared key ( psk ) ciphersuites with null encryption for transport layer security ( tls ) '' . : '' using the secure remote password ( srp ) protocol for tls authentication '' . defines the tls-srp ciphersuites . : '' transport layer security ( tls ) session resumption without server-side state '' . : '' using openpgp keys for transport layer security ( tls ) authentication '' , obsoleted by . extensions to tls 1.2 include : : '' aes galois/counter mode ( gcm ) cipher suites for tls '' . : '' tls elliptic curve cipher suites with sha-256/384 and aes galois counter mode ( gcm ) '' . : '' transport layer security ( tls ) renegotiation indication extension '' . : '' transport layer security ( tls ) authorization extensions '' . : '' camellia cipher suites for tls '' : '' transport layer security ( tls ) extensions : extension definitions '' , includes server name indication and ocsp stapling . : '' using openpgp keys for transport layer security ( tls ) authentication '' . : '' prohibiting secure sockets layer ( ssl ) version 2.0 '' . : '' addition of the aria cipher suites to transport layer security ( tls ) '' . : '' datagram transport layer security version 1.2 '' . : '' addition of the camellia cipher suites to transport layer security ( tls ) '' . : '' suite b profile for transport layer security ( tls ) '' . : '' aes-ccm cipher suites for transport layer security ( tls ) '' . : '' elliptic curve cryptography ( ecc ) brainpool curves for transport layer security ( tls ) '' . : '' aes-ccm elliptic curve cryptography ( ecc ) cipher suites for tls '' . : '' transport layer security ( tls ) application-layer protocol negotiation extension '' . : '' encrypt-then-mac for transport layer security ( tls ) and datagram transport layer security ( dtls ) '' . : '' prohibiting rc4 cipher suites '' . : '' tls fallback signaling cipher suite value ( scsv ) for preventing protocol downgrade attacks '' . : '' deprecating secure sockets layer version 3.0 '' . : '' transport layer security ( tls ) session hash and extended master secret extension '' . : '' a transport layer security ( tls ) clienthello padding extension '' . encapsulations of tls include : : '' the eap-tls authentication protocol '' . informational rfcs . : '' summarizing known attacks on transport layer security ( tls ) and datagram tls ( dtls ) '' : '' recommendations for secure use of transport layer security ( tls ) and datagram transport layer security ( dtls ) '' . see also . application-layer protocol negotiation â€“ a tls extension used for spdy and tls false start bullrun ( decryption program ) â€“ a secret anti-encryption program run by the u.s . national security agency certificate authority certificate transparency http strict transport security â€“ hsts key ring file quic ( quick udp internet connections ) â€“ '' . was designed to provide security protection equivalent to tls/ssl '' ; quic 's main goal is to improve perceived performance of connection-oriented web applications that are currently using tcp server-gated cryptography tcpcrypt dtls tls acceleration . references . further reading . creating vpns with ipsec and ssl/tls linux journal article by rami rosen . external links . specifications ( see for older ssl 2.0 , ssl 3.0 , tls 1.0 , tls 1.1 links ) the transport layer security ( tls ) protocol version 1.2 ietf ( internet engineering task force ) tls workgroup ; tls version intolerance tls version intolerance tls 1.3 and version intolerance ; other owasp : transport layer protection cheat sheet a talk on ssl/tls that tries to explain things in terms that people might understand . tls renegotiation vulnerability â€“ ietf tools qualys ssl labs â€“ ssl pulse how to generate csr for ssl how tls handshake works in private browser