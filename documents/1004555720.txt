Hyper-threading

overview . hyper-threading technology is a form of simultaneous multithreading technology introduced by intel , while the concept behind the technology has been patented by sun microsystems . architecturally , a processor with hyper-threading technology consists of two logical processors per core , each of which has its own processor architectural state . each logical processor can be individually halted , interrupted or directed to execute a specified thread , independently from the other logical processor sharing the same physical core . unlike a traditional dual-processor configuration that uses two separate physical processors , the logical processors in a hyper-threaded core share the execution resources . these resources include the execution engine , caches , and system bus interface ; the sharing of resources allows two logical processors to work with each other more efficiently , and allows a logical processor to borrow resources from a stalled logical core ( assuming both logical cores are associated with the same physical core ) . a processor stalls when it is waiting for data it has sent for so it can finish processing the present thread . the degree of benefit seen when using a hyper-threaded or multi core processor depends on the needs of the software , and how well it and the operating system are written to manage the processor efficiently . hyper-threading works by duplicating certain sections of the processor—those that store the architectural state—but not duplicating the main execution unit . this allows a hyper-threading processor to appear as the usual '' physical '' processor and an extra '' logical '' processor to the host operating system ( htt-unaware operating systems see two '' physical '' processors ) , allowing the operating system to schedule two threads or processes simultaneously and appropriately . when execution resources would not be used by the current task in a processor without hyper-threading , and especially when the processor is stalled , a hyper-threading equipped processor can use those execution resources to execute another scheduled task . ( the processor may stall due to a cache miss , branch misprediction , or data dependency . ) this technology is transparent to operating systems and programs . the minimum that is required to take advantage of hyper-threading is symmetric multiprocessing ( smp ) support in the operating system , as the logical processors appear as standard separate processors . it is possible to optimize operating system behavior on multi-processor hyper-threading capable systems . for example , consider an smp system with two physical processors that are both hyper-threaded ( for a total of four logical processors ) . if the operating system 's thread scheduler is unaware of hyper-threading , it will treat all four logical processors the same . if only two threads are eligible to run , it might choose to schedule those threads on the two logical processors that happen to belong to the same physical processor ; that processor would become extremely busy while the other would idle , leading to poorer performance than is possible by scheduling the threads onto different physical processors . this problem can be avoided by improving the scheduler to treat logical processors differently from physical processors ; in a sense , this is a limited form of the scheduler changes that are required for numa systems . history . the first published paper describing what is now known as hyper-threading in a general purpose computer was written by edward s . davidson and leonard . e . shar in 1973 . '' a multiminiprocessor system implemented through pipelining '' , by leonard shar and edward davidson , ieee computer , feb . 1974 , pp . 42-51 , vol . 7 denelcor , inc . introduced multi-threading with the heterogeneous element processor ( hep ) in 1982 . the hep pipeline could not hold multiple instructions from the same process . only one instruction from a given process was allowed to be present in the pipeline at any point in time . should an instruction from a given process block the pipe , instructions from other processes would continue after the pipeline drained . us patent for the technology behind hyper-threading was granted to kenneth okin at sun microsystems in november 1994 . at that time , cmos process technology was not advanced enough to allow for a cost-effective implementation . intel implemented hyper-threading on an x86 architecture processor in 2002 with the foster mp-based xeon . it was also included on the 3.06 & nbsp ; ghz northwood-based pentium & nbsp ; 4 in the same year , and then remained as a feature in every pentium & nbsp ; 4 & nbsp ; ht , pentium & nbsp ; 4 extreme edition and pentium extreme edition processor since . the intel core & core 2 processor lines ( 2006 ) that succeeded the pentium 4 model line did n't utilize hyper-threading . the processors based on the core microarchitecture did not have hyper-threading because the core microarchitecture was a descendant of the older p6 microarchitecture . the p6 microarchitecture was used in earlier iterations of pentium processors , namely , the pentium pro , pentium & nbsp ; ii and pentium & nbsp ; iii ( plus their celeron & xeon derivatives at the time ) . intel released the nehalem microarchitecture ( core & nbsp ; i7 ) in november 2008 , in which hyper-threading made a return . the first generation nehalem processors contained four physical cores and effectively scaled to eight threads . since then , both two- and six-core models have been released , scaling four and twelve threads respectively . earlier intel atom cores were in-order processors , sometimes with hyper-threading ability , for low power mobile pcs and low-price desktop pcs . the itanium & nbsp ; 9300 launched with eight threads per processor ( two threads per core ) through enhanced hyper-threading technology . the next model , the itanium 9500 ( poulson ) , features a 12-wide issue architecture , with eight cpu cores with support for eight more virtual cores via hyper-threading . the intel xeon & nbsp ; 5500 server chips also utilize two-way hyper-threading . . performance claims . according to intel , the first hyper-threading implementation used only 5 % more die area than the comparable non-hyperthreaded processor , but the performance was 15–30 % better . intel claims up to a 30 % performance improvement compared with an otherwise identical , non-simultaneous multithreading pentium & nbsp ; 4 . tom 's hardware states : '' in some cases a p4 running at 3.0 & nbsp ; ghz with ht on can even beat a p4 running at 3.6 & nbsp ; ghz with ht turned off . '' intel also claims significant performance improvements with a hyper-threading-enabled pentium & nbsp ; 4 processor in some artificial-intelligence algorithms . overall the performance history of hyper-threading was a mixed one in the beginning . as one commentary on high-performance computing from november 2002 notes : hyper-threading can improve the performance of some mpi applications , but not all . depending on the cluster configuration and , most importantly , the nature of the application running on the cluster , performance gains can vary or even be negative . the next step is to use performance tools to understand what areas contribute to performance gains and what areas contribute to performance degradation . as a result , performance improvements are very application-dependent ; however , when running two programs that require full attention of the processor , it can actually seem like one or both of the programs slows down slightly when hyper-threading technology is turned on . this is due to the replay system of the pentium & nbsp ; 4 tying up valuable execution resources , equalizing the processor resources between the two programs , which adds a varying amount of execution time . the pentium & nbsp ; 4 '' prescott '' and the xeon '' nocona '' processors received a replay queue that reduces execution time needed for the replay system and completely overcomes the performance penalty . according to a november 2009 analysis by intel , performance impacts of hyper-threading result in increased overall latency in case the execution of threads does not result in significant overall throughput gains , which vary by the application . in other words , overall processing latency is significantly increased due to hyper-threading , with the negative effects becoming smaller as there are more simultaneous threads that can effectively use the additional hardware resource utilization provided by hyper-threading . a similar performance analysis is available for the effects of hyper-threading when used to handle tasks related to managing network traffic , such as for processing interrupt requests generated by network interface controllers ( nics ) . another paper claims no performance improvements when hyper-threading is used for interrupt handling . . drawbacks . when the first ht processors were released , many operating systems were not optimized for hyper-threading technology ( e.g . windows 2000 and linux older than 2.4 ) . in 2006 , hyper-threading was criticised for energy inefficiency . for example , specialist low-power cpu design company arm stated that simultaneous multithreading can use up to 46 % more power than ordinary dual-core designs . furthermore , they claimed that smt increases cache thrashing by 42 % , whereas dual core results in a 37 % decrease . in 2010 , arm said it might include simultaneous multithreading in its future chips ; however , this was rejected in favor of their 2012 64-bit design . in 2013 , intel dropped smt in favor of out-of-order execution for its silvermont processor cores , as they found this gave better performance with better power efficiency than a lower number of cores with smt . in 2017 , it was revealed intel 's skylake and kaby lake processors had a bug with their implementation of hyper-threading that could cause data loss . microcode updates were later released to address the issue . in 2019 , with coffee lake , intel began to move away from including hyper-threading in mainstream core i7 desktop processors except for highest-end core i9 parts or pentium gold cpus . it also started recommending disabling hyper-threading as new cpu vulnerability attacks were revealed which could be mitigated by disabling ht . . security . in may 2005 , colin percival demonstrated that a malicious thread on a pentium & nbsp ; 4 can use a timing attack to monitor the memory access patterns of another thread with which it shares a cache , allowing the theft of cryptographic information . potential solutions to this include the processor changing its cache eviction strategy or the operating system preventing the simultaneous execution , on the same physical core , of threads with different privileges . in 2018 the openbsd operating system has disabled hyper-threading '' in order to avoid data potentially leaking from applications to other software '' caused by the foreshadow/l1tf vulnerabilities . in 2019 a set of vulnerabilities led to security experts recommending the disabling of hyper-threading on all devices .