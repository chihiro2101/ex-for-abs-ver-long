Interactive proof system

np . the complexity class np may be viewed as a very simple proof system . in this system , the verifier is a deterministic , polynomial-time machine ( a p machine ) . the protocol is : the prover looks at the input and computes the solution using its unlimited power and returns a polynomial-size proof certificate . the verifier verifies that the certificate is valid in deterministic polynomial time . if it is valid , it accepts ; otherwise , it rejects . in the case where a valid proof certificate exists , the prover is always able to make the verifier accept by giving it that certificate . in the case where there is no valid proof certificate , however , the input is not in the language , and no prover , however malicious it is , can convince the verifier otherwise , because any proof certificate will be rejected . arthur–merlin and merlin–arthur protocols . although np may be viewed as using interaction , it was n't until 1985 that the concept of computation through interaction was conceived ( in the context of complexity theory ) by two independent groups of researchers . one approach , by lászló babai , who published '' trading group theory for randomness '' , lászló babai . trading group theory for randomness . proceedings of the seventeenth annual symposium on the theory of computing , acm . 1985 . defined the arthur–merlin ( am ) class hierarchy . in this presentation , arthur ( the verifier ) is a probabilistic , polynomial-time machine , while merlin ( the prover ) has unbounded resources . the class ma in particular is a simple generalization of the np interaction above in which the verifier is probabilistic instead of deterministic . also , instead of requiring that the verifier always accept valid certificates and reject invalid certificates , it is more lenient : completeness : if the string is in the language , the prover must be able to give a certificate such that the verifier will accept with probability at least 2/3 ( depending on the verifier 's random choices ) . soundness : if the string is not in the language , no prover , however malicious , will be able to convince the verifier to accept the string with probability exceeding 1/3 . this machine is potentially more powerful than an ordinary np interaction protocol , and the certificates are no less practical to verify , since bpp algorithms are considered as abstracting practical computation ( see bpp ) . public coin protocol versus private coin protocol . in a public coin protocol , the random choices made by the verifier are made public . they remain private in a private coin protocol . in the same conference where babai defined his proof system for ma , shafi goldwasser , silvio micali and charles rackoff extended abstract published a paper defining the interactive proof system ipf ( n ) . this has the same machines as the ma protocol , except that f ( n ) rounds are allowed for an input of size n . in each round , the verifier performs computation and passes a message to the prover , and the prover performs computation and passes information back to the verifier . at the end the verifier must make its decision . for example , in an ip3 protocol , the sequence would be vpvpvpv , where v is a verifier turn and p is a prover turn . in arthur–merlin protocols , babai defined a similar class amf ( n ) which allowed f ( n ) rounds , but he put one extra condition on the machine : the verifier must show the prover all the random bits it uses in its computation . the result is that the verifier can not '' hide '' anything from the prover , because the prover is powerful enough to simulate everything the verifier does if it knows what random bits it used . this is called a public coin protocol , because the random bits ( '' coin flips '' ) are visible to both machines . the ip approach is called a private coin protocol by contrast . the essential problem with public coins is that if the prover wishes to maliciously convince the verifier to accept a string which is not in the language , it seems like the verifier might be able to thwart its plans if it can hide its internal state from it . this was a primary motivation in defining the ip proof systems . in 1986 , goldwasser and sipser shafi goldwasser and michael sipser . private coins versus public coins in interactive proof systems . proceedings of acm stoc'86 , pp . 58–68 . 1986 . showed , perhaps surprisingly , that the verifier 's ability to hide coin flips from the prover does it little good after all , in that an arthur–merlin public coin protocol with only two more rounds can recognize all the same languages . the result is that public-coin and private-coin protocols are roughly equivalent . in fact , as babai shows in 1988 , amk am for all constant k , so the ipk have no advantage over am . lászló babai and shlomo moran . arthur–merlin games : a randomized proof system , and a hierarchy of complexity classes . journal of computer and system sciences , 36 : p.254–276 . 1988 . to demonstrate the power of these classes , consider the graph isomorphism problem , the problem of determining whether it is possible to permute the vertices of one graph so that it is identical to another graph . this problem is in np , since the proof certificate is the permutation which makes the graphs equal . it turns out that the complement of the graph isomorphism problem , a co-np problem not known to be in np , has an am algorithm and the best way to see it is via a private coins algorithm . o . goldreich , s . micali , a . wigderson . proofs that yield nothing but their validity . journal of the acm , volume 38 , issue 3 , p.690–728 . july 1991 . . ip . private coins may not be helpful , but more rounds of interaction are helpful . if we allow the probabilistic verifier machine and the all-powerful prover to interact for a polynomial number of rounds , we get the class of problems called ip . in 1992 , adi shamir revealed in one of the central results of complexity theory that ip equals pspace , the class of problems solvable by an ordinary deterministic turing machine in polynomial space . adi shamir . ip pspace . journal of the acm , volume 39 , issue 4 , p.869–877 . october 1992 . . qip . if we allow the elements of the system to use quantum computation , the system is called a quantum interactive proof system , and the corresponding complexity class is called qip . a series of results culminated in a 2010 breakthrough that qip pspace . . zero knowledge . not only can interactive proof systems solve problems not believed to be in np , but under assumptions about the existence of one-way functions , a prover can convince the verifier of the solution without ever giving the verifier information about the solution . this is important when the verifier can not be trusted with the full solution . at first it seems impossible that the verifier could be convinced that there is a solution when the verifier has not seen a certificate , but such proofs , known as zero-knowledge proofs are in fact believed to exist for all problems in np and are valuable in cryptography . zero-knowledge proofs were first mentioned in the original 1985 paper on ip by goldwasser , micali and rackoff , but the extent of their power was shown by oded goldreich , silvio micali and avi wigderson . . mip . one goal of ip 's designers was to create the most powerful possible interactive proof system , and at first it seems like it can not be made more powerful without making the verifier more powerful and so impractical . goldwasser et al . overcame this in their 1988 '' multi prover interactive proofs : how to remove intractability assumptions '' , which defines a variant of ip called mip in which there are two independent provers . m . ben-or , shafi goldwasser , j . kilian , and a . wigderson . multi prover interactive proofs : how to remove intractability assumptions . proceedings of the 20th acm symposium on theory of computing , pp . 113–121 . 1988 . the two provers can not communicate once the verifier has begun sending messages to them . just as it 's easier to tell if a criminal is lying if he and his partner are interrogated in separate rooms , it 's considerably easier to detect a malicious prover trying to trick the verifier into accepting a string not in the language if there is another prover it can double-check with . in fact , this is so helpful that babai , fortnow , and lund were able to show that mip nexptime , the class of all problems solvable by a nondeterministic machine in exponential time , a very large class . lászló babai , l . fortnow , and c . lund . non-deterministic exponential time has two-prover interactive protocols . computational complexity , volume 1 , pp . 3–40 . 1991 . nexptime contains pspace , and is believed to strictly contain pspace . adding a constant number of additional provers beyond two does not enable recognition of any more languages . this result paved the way for the celebrated pcp theorem , which can be considered to be a '' scaled-down '' version of this theorem . mip also has the helpful property that zero-knowledge proofs for every language in np can be described without the assumption of one-way functions that ip must make . this has bearing on the design of provably unbreakable cryptographic algorithms . moreover , a mip protocol can recognize all languages in ip in only a constant number of rounds , and if a third prover is added , it can recognize all languages in nexptime in a constant number of rounds , showing again its power over ip . it is known that for any constant k , a mip system with k provers and polynomially many rounds can be turned into an equivalent system with only 2 provers , and a constant number of rounds . . pcp . while the designers of ip considered generalizations of babai 's interactive proof systems , others considered restrictions . a very useful interactive proof system is pcp ( f ( n ) , g ( n ) ) , which is a restriction of ma where arthur can only use f ( n ) random bits and can only examine g ( n ) bits of the proof certificate sent by merlin ( essentially using random access ) . there are a number of easy-to-prove results about various pcp classes . sanjeev arora , c . lund , r . motwani , m . sudan , and m . szegedy . proof verification and the hardness of approximation problems . proceedings of the 33rd ieee symposium on foundations of computer science , pp . 13–22 . 1992 . they used this valuable characterization of np to prove that approximation algorithms do not exist for the optimization versions of certain np-complete problems unless p np . such problems are now studied in the field known as hardness of approximation .