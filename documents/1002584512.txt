Factory method pattern

overview . the factory method design pattern is one of the design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software , that is , objects that are easier to implement , change , test , and reuse . the factory method design pattern is used instead of the regular class constructor for keeping within the solid principles of programming , decoupling the construction of objects from the objects themselves . this has the following advantages and is useful for the following cases , among others : allows construction of classes with a component of a type that has not been predetermined , but only defined in an '' interface '' , or which is defined as a dynamic type . : thus , for example , a class vehicle that has a member motor of interface imotor , but no concrete type of motor defined in advance , can be constructed by telling the vehicle constructor to use an electricmotor or a gasolinemotor . the vehicle constructor code then calls a motor factory method , to create the desired motor that complies with the imotor interface . allows construction of subclasses to a parent whose component type has not been predetermined , but only defined in an interface , or which is defined as a dynamic type . : for example , a class vehicle with a member motor defined with a dynamic type , can have subclasses of type electricplane and oldcar each constructed with a different type of motor . this can be accomplished by constructing the subclasses with a vehicle factory method , while supplying the motor type . in cases like this , the constructor may be hidden . allows for more readable code in cases where multiple constructors exist , each for a different reason . : for example if there are two constructors and a more readable construction of the classes would be to use vs allows a class to defer instantiation to subclasses , and to prevent direct instantiation of an object of the parent class type . : for example , a vehicle can be prevented from being instantiated directly since it has no constructor , and only subclasses like electricplane or oldcar can be created by calling the vehicle ( static ) factory method in the subclass constructor or initializer . creating an object directly within the class that requires or uses the object is inflexible because it commits the class to a particular object and makes it impossible to change the instantiation independently of the class . a change to the instantiator would require a change to the class code which we would rather not touch . this is referred to as code coupling and the factory method pattern assists in decoupling the code . the factory method design pattern is used by first defining a separate operation , a factory method , for creating an object , and then using this factory method by calling it to create the object . this enables writing of subclasses that decide how a parent object is created and what type of objects the parent contains . . definition . '' define an interface for creating an object , but let subclasses decide which class to instantiate . the factory method lets a class defer instantiation it uses to subclasses . '' ( gang of four ) creating an object often requires complex processes not appropriate to include within a composing object . the object 's creation may lead to a significant duplication of code , may require information not accessible to the composing object , may not provide a sufficient level of abstraction , or may otherwise not be part of the composing object 's concerns . the factory method design pattern handles these problems by defining a separate method for creating the objects , which subclasses can then override to specify the subtype of product that will be created . the factory method pattern relies on inheritance , as object creation is delegated to subclasses that implement the factory method to create objects . . structure . uml class diagram . none in the above uml class diagram , the creator class that requires a product object does n't instantiate the product1 class directly . instead , the creator refers to a separate factorymethod ( ) to create a product object , which makes the creator independent of which concrete class is instantiated . subclasses of creator can redefine which class to instantiate . in this example , the creator1 subclass implements the abstract factorymethod ( ) by instantiating the product1 class . example . a maze game may be played in two modes , one with regular rooms that are only connected with adjacent rooms , and one with magic rooms that allow players to be transported at random . structure . room is the base class for a final product ( magicroom or ordinaryroom ) . mazegame declares the abstract factory method to produce such a base product . magicroom and ordinaryroom are subclasses of the base product implementing the final product . magicmazegame and ordinarymazegame are subclasses of mazegame implementing the factory method producing the final products . thus factory methods decouple callers ( mazegame ) from the implementation of the concrete classes . this makes the '' new '' operator redundant , allows adherence to the open/closed principle and makes the final product more flexible in the event of change . example implementations . . c . // empty vocabulary of actual object public interface iperson '' '.format ( self.rooms0 ) ) abstractmethod def make_room ( self ) : raise notimplementederror ( '' you should implement this ! '' ) class magicmazegame ( mazegame ) : def make_room ( self ) : return magicroom ( ) class ordinarymazegame ( mazegame ) : def make_room ( self ) : return ordinaryroom ( ) class room ( abc ) : def __init__ ( self ) - > none : self.connected_rooms def connect ( self , room ) - > none : self.connected_rooms.append ( room ) class magicroom ( room ) : def __str__ ( self ) : return '' magic room '' class ordinaryroom ( room ) : def __str__ ( self ) : return '' ordinary room '' ordinarygame ordinarymazegame ( ) ordinarygame.play ( ) magicgame magicmazegame ( ) magicgame.play ( ) . uses . in ado.net , idbcommand.createparameter is an example of the use of factory method to connect parallel class hierarchies . in qt , qmainwindow : :createpopupmenu is a factory method declared in a framework that can be overridden in application code . in java , several factories are used in the javax.xml.parsers package . e.g . javax.xml.parsers.documentbuilderfactory or javax.xml.parsers.saxparserfactory . in the html5 dom api , the document interface contains a createelement factory method for creating specific elements of the htmlelement interface . see also . design patterns , the highly influential book design pattern , overview of design patterns in general abstract factory pattern , a pattern often implemented using factory methods builder pattern , another creational pattern template method pattern , which may call factory methods joshua bloch 's idea of a static factory method , which he says has no direct equivalent in design patterns . references . . external links . factory design pattern implementation in java factory method in uml and in lepus3 ( a design description language ) consider static factory methods by joshua bloch