Open Database Connectivity

history . before odbc . the introduction of the mainframe-based relational database during the 1970s led to a proliferation of data access methods . generally these systems operated together with a simple command processor that allowed users to type in english-like commands , and receive output . the best-known examples are sql from ibm and quel from the ingres project . these systems may or may not allow other applications to access the data directly , and those that did use a wide variety of methodologies . the introduction of sql aimed to solve the problem of language standardization , although substantial differences in implementation remained . since the sql language had only rudimentary programming features , users often wanted to use sql within a program written in another language , say fortran or c . this led to the concept of embedded sql , which allowed sql code to be embedded within another language . for instance , a sql statement like select from city could be inserted as text within c source code , and during compiler it would be converted into a custom format that directly called a function within a library that would pass the statement into the sql system . results returned from the statements would be interpreted back into c data formats like char using similar library code . there were several problems with the embedded sql approach . like the different varieties of sql , the embedded sqls that used them varied widely , not only from platform to platform , but even across languages on one platform – a system that allowed calls into ibm 's db2 would look very different from one that called into their own sql/ds . another key problem to the embedded sql concept was that the sql code could only be changed in the program 's source code , so that even small changes to the query required considerable programmer effort to modify . the sql market referred to this as static sql , versus dynamic sql which could be changed at any time , like the command-line interfaces that shipped with almost all sql systems , or a programming interface that left the sql as plain text until it was called . dynamic sql systems became a major focus for sql vendors during the 1980s . older mainframe databases , and the newer microcomputer based systems that were based on them , generally did not have a sql-like command processor between the user and the database engine . instead , the data was accessed directly by the program – a programming library in the case of large mainframe systems , or a command line interface or interactive forms system in the case of dbase and similar applications . data from dbase could not generally be accessed directly by other programs running on the machine . those programs may be given a way to access this data , often through libraries , but it would not work with any other database engine , or even different databases in the same engine . in effect , all such systems were static , which presented considerable problems . early efforts . by the mid-1980s the rapid improvement in microcomputers , and especially the introduction of the graphical user interface and data-rich application programs like lotus 1-2-3 led to an increasing interest in using personal computers as the client-side platform of choice in client-server computing . under this model , large mainframes and minicomputers would be used primarily to serve up data over local area networks to microcomputers that would interpret , display and manipulate that data . for this model to work , a data access standard was a requirement – in the mainframe field it was highly likely that all of the computers in a shop were from one vendor and clients were computer terminals talking directly to them , but in the micro field there was no such standardization and any client might access any server using any networking system . by the late 1980s there were several efforts underway to provide an abstraction layer for this purpose . some of these were mainframe related , designed to allow programs running on those machines to translate between the variety of sql 's and provide a single common interface which could then be called by other mainframe or microcomputer programs . these solutions included ibm 's distributed relational database architecture ( drda ) and apple computer 's data access language . much more common , however , were systems that ran entirely on microcomputers , including a complete protocol stack that included any required networking or file translation support . one of the early examples of such a system was lotus development 's datalens , initially known as blueprint . blueprint , developed for 1-2-3 , supported a variety of data sources , including sql/ds , db2 , focus and a variety of similar mainframe systems , as well as microcomputer systems like dbase and the early microsoft/ashton-tate efforts that would eventually develop into microsoft sql server . mcglinn , evan ( 1988 ) , blueprint lets 1-2-3 access outside data '' , infoworld , vol . 10 , no . 14 , 4 april 1988 , pp . 1 , 69 unlike the later odbc , blueprint was a purely code-based system , lacking anything approximating a command language like sql . instead , programmers used data structures to store the query information , constructing a query by linking many of these structures together . lotus referred to these compound structures as query trees . around the same time , an industry team including members from sybase ( tom haggin ) , tandem computers ( jim gray & rao yendluri ) and microsoft ( kyle g ) were working on a standardized dynamic sql concept . much of the system was based on sybase 's db-library system , with the sybase-specific sections removed and several additions to support other platforms . db-library was aided by an industry-wide move from library systems that were tightly linked to a specific language , to library systems that were provided by the operating system and required the languages on that platform to conform to its standards . this meant that a single library could be used with ( potentially ) any programming language on a given platform . the first draft of the microsoft data access api was published in april 1989 , about the same time as lotus ' announcement of blueprint . in spite of blueprint 's great lead – it was running when msda was still a paper project – lotus eventually joined the msda efforts as it became clear that sql would become the de facto database standard . after considerable industry input , in the summer of 1989 the standard became sql connectivity ( sqlc ) . sag and cli . in 1988 several vendors , mostly from the unix and database communities , formed the sql access group ( sag ) in an effort to produce a single basic standard for the sql language . at the first meeting there was considerable debate over whether or not the effort should work solely on the sql language itself , or attempt a wider standardization which included a dynamic sql language-embedding system as well , what they called a call level interface ( cli ) . while attending the meeting with an early draft of what was then still known as ms data access , kyle geiger of microsoft invited jeff balboni and larry barnes of digital equipment corporation ( dec ) to join the sqlc meetings as well . sqlc was a potential solution to the call for the cli , which was being led by dec . the new sqlc '' gang of four '' , ms , tandem , dec and sybase , brought an updated version of sqlc to the next sag meeting in june 1990 . the sag responded by opening the standard effort to any competing design , but of the many proposals , only oracle corp had a system that presented serious competition . in the end , sqlc won the votes and became the draft standard , but only after large portions of the api were removed – the standards document was trimmed from 120 pages to 50 during this time . it was also during this period that the name call level interface was formally adopted . in 1995 sql/cli became part of the international sql standard , iso/iec 9075-3 . iso/iec 9075-3 – information technology – database languages – sql – part 3 : call-level interface ( sql/cli ) the sag itself was taken over by the x/open group in 1996 , and , over time , became part of the open group 's common application environment . ms continued working with the original sqlc standard , retaining many of the advanced features that were removed from the cli version . these included features like scrollable cursors , and metadata information queries . the commands in the api were split into groups ; the core group was identical to the cli , the level 1 extensions were commands that would be easy to implement in drivers , while level 2 commands contained the more advanced features like cursors . a proposed standard was released in december 1991 , and industry input was gathered and worked into the system through 1992 , resulting in yet another name change to odbc . jet and odbc . during this time , microsoft was in the midst of developing their jet database system . jet combined three primary subsystems ; an isam-based database engine ( also named jet , confusingly ) , a c-based interface allowing applications to access that data , and a selection of driver dynamic-link libraries ( dll ) that allowed the same c interface to redirect input and output to other isam-based databases , like paradox and xbase . jet allowed using one set of calls to access common microcomputer databases in a fashion similar to blueprint , by then renamed datalens . however , jet did not use sql ; like datalens , the interface was in c and consisted of data structures and function calls . the sag standardization efforts presented an opportunity for microsoft to adapt their jet system to the new cli standard . this would not only make windows a premier platform for cli development , but also allow users to use sql to access both jet and other databases as well . what was missing was the sql parser that could convert those calls from their text form into the c-interface used in jet . to solve this , ms partnered with simba technologies to use their existing query processor , simba . simba was used as a parser above jet 's c library , turning jet into an sql database . and because jet could forward those c-based calls to other databases , this also allowed simba to query other systems . microsoft included drivers for excel to turn its spreadsheet documents into sql-accessible database tables . . release and continued development . odbc 1.0 was released in september 1992 . at the time , there was little direct support for sql databases ( versus isam ) , and early drivers were noted for poor performance . some of this was unavoidable due to the path that the calls took through the jet-based stack ; odbc calls to sql databases were first converted from simba technologies 's sql dialect to jet 's internal c-based format , then passed to a driver for conversion back into sql calls for the database . digital equipment and oracle both contracted simba technologies to develop drivers for their databases as well . '' our history '' , simba technologies circa 1993 , openlink software shipped one of the first independently developed third-party odbc drivers , for the progress dbms , and soon followed with their udbc ( a cross-platform api equivalent of odbc and the sag/cli ) sdk and associated drivers for progress , sybase , oracle , and other dbms , for use on unix-like os ( aix , hp-ux , solaris , linux , etc . ) , vms , windows nt , os/2 , and other os . meanwhile , the cli standard effort dragged on , and it was not until march 1995 that the definitive version was finalized . by then , microsoft had already granted visigenic software a source code license to develop odbc on non-windows platforms . visigenic ported odbc to a wide variety of unix platforms , where odbc quickly became the de facto standard . sippl , roger ( 1996 ) '' sql access group 's call-level interface '' , dr . dobbs , 1 february 1996 '' real '' cli is rare today . the two systems remain similar , and many applications can be ported from odbc to cli with few or no changes . '' similarities and differences between odbc and cli '' , infosphere classic documentation , ibm , 26 september 2008 over time , database vendors took over the driver interfaces and provided direct links to their products . skipping the intermediate conversions to and from jet or similar wrappers often resulted in higher performance . however , by then microsoft had changed focus to their ole db concept ( recently reinstated ) , which provided direct access to a wider variety of data sources from address books to text files . several new systems followed which further turned their attention from odbc , including activex data objects ( ado ) and ado.net , which interacted more or less with odbc over their lifetimes . as microsoft turned its attention away from working directly on odbc , the unix field was increasingly embracing it . this was propelled by two changes within the market , the introduction of graphical user interfaces ( guis ) like gnome that provided a need to access these sources in non-text form , and the emergence of open software database systems like postgresql and mysql , initially under unix . the later adoption of odbc by apple for using the standard unix-side iodbc package mac os x 10.2 ( jaguar ) ( which openlink software had been independently providing for mac os x 10.0 and even mac os 9 since 2001 ) further cemented odbc as the standard for cross-platform data access . sun microsystems used the odbc system as the basis for their own open standard , java database connectivity ( jdbc ) . in most ways , jdbc can be considered a version of odbc for the programming language java instead of c . jdbc-to-odbc bridges allow java-based programs to access data sources through odbc drivers on platforms lacking a native jdbc driver , although these are now relatively rare . inversely , odbc-to-jdbc bridges allow c-based programs to access data sources through jdbc drivers on platforms or from databases lacking suitable odbc drivers . odbc today . odbc remains in wide use today , with drivers available for most platforms and most databases . it is not uncommon to find odbc drivers for database engines that are meant to be embedded , like sqlite , as a way to allow existing tools to act as front-ends to these engines for testing and debugging . werner , christian ( 2018 ) '' sqlite odbc driver '' , 2018-02-24 however , the rise of thin client computing using html as an intermediate format has reduced the need for odbc . many web development platforms contain direct links to target databases – mysql being very common . in these scenarios , there is no direct client-side access nor multiple client software systems to support ; everything goes through the programmer-supplied html application . the virtualization that odbc offers is no longer a strong requirement , and development of odbc is no longer as active as it once was . but when odbc is no longer a strong requirement for client-server programming , now is odbc more important for data access and data virtualization of data integration in data analytic and data science scenarios . these new requirements are reflected in new odbc 4.0 features such as semi-structured and hierarchical data , web authentication and performance improvement . version history . version history : 1.0 : released in september 1992 2.0 : 1994 2.5 3.0 : 1995 , john goodson of intersolv and frank pellow and paul cotton of ibm provided significant input to odbc 3.0 microsoft corporation . microsoft odbc 3.0 programmer 's reference and sdk guide , volume 1 . microsoft press . february 1997 . 3.5 : 1997 3.8 : 2009 , with windows 7 4.0 : development announced june 2016 with first implementation with sql server 2017 released sep 2017 and additional desktop drivers late 2018 final spec on github . drivers and managers . drivers . odbc is based on the device driver model , where the driver encapsulates the logic needed to convert a standard set of commands and functions into the specific calls required by the underlying system . for instance , a printer driver presents a standard set of printing commands , the api , to applications using the printing system . calls made to those apis are converted by the driver into the format used by the actual hardware , say postscript or pcl . in the case of odbc , the drivers encapsulate many functions that can be broken down into several broad categories . one set of functions is primarily concerned with finding , connecting to and disconnecting from the dbms that driver talks to . a second set is used to send sql commands from the odbc system to the dbms , converting or interpreting any commands that are not supported internally . for instance , a dbms that does not support cursors can emulate this functionality in the driver . finally , another set of commands , mostly used internally , is used to convert data from the dbms 's internal formats to a set of standardized odbc formats , which are based on the c language formats . an odbc driver enables an odbc-compliant application to use a data source , normally a dbms . some non-dbms drivers exist , for such data sources as csv files , by implementing a small dbms inside the driver itself . odbc drivers exist for most dbmss , including oracle , postgresql , mysql , microsoft sql server ( but not for the sql server compact ) , sybase ase , sap hana and db2 . because different technologies have different capabilities , most odbc drivers do not implement all functionality defined in the odbc standard . some drivers offer extra functionality not defined by the standard . driver manager . device drivers are normally enumerated , set up and managed by a separate manager layer , which may provide additional functionality . for instance , printing systems often include functionality to provide spooling functionality on top of the drivers , providing print spooling for any supported printer . in odbc the driver manager ( dm ) provides these features . the dm can enumerate the installed drivers and present this as a list , often in a gui-based form . but more important to the operation of the odbc system is the dm 's concept of a data source name ( dsn ) . dsns collect additional information needed to connect to a specific data source , versus the dbms itself . for instance , the same mysql driver can be used to connect to any mysql server , but the connection information to connect to a local private server is different from the information needed to connect to an internet-hosted public server . the dsn stores this information in a standardized format , and the dm provides this to the driver during connection requests . the dm also includes functionality to present a list of dsns using human readable names , and to select them at run-time to connect to different resources . the dm also includes the ability to save partially complete dsn 's , with code and logic to ask the user for any missing information at runtime . for instance , a dsn can be created without a required password . when an odbc application attempts to connect to the dbms using this dsn , the system will pause and ask the user to provide the password before continuing . this frees the application developer from having to create this sort of code , as well as having to know which questions to ask . all of this is included in the driver and the dsns . bridging configurations . a bridge is a special kind of driver : a driver that uses another driver-based technology . odbc-to-jdbc ( odbc-jdbc ) bridges . an odbc-jdbc bridge consists of an odbc driver which uses the services of a jdbc driver to connect to a database . this driver translates odbc function-calls into jdbc method-calls . programmers usually use such a bridge when they lack an odbc driver for some database but have access to a jdbc driver . examples : openlink odbc-jdbc bridge , sequelink odbc-jdbc bridge . jdbc-to-odbc ( jdbc-odbc ) bridges . a jdbc-odbc bridge consists of a jdbc driver which employs an odbc driver to connect to a target database . this driver translates jdbc method calls into odbc function calls . programmers usually use such a bridge when a given database lacks a jdbc driver , but is accessible through an odbc driver . sun microsystems included one such bridge in the jvm , but viewed it as a stop-gap measure while few jdbc drivers existed ( the built-in jdbc-odbc bridge was dropped from the jvm in java 8 ) . sun never intended its bridge for production environments , and generally recommended against its use . independent data-access vendors deliver jdbc-odbc bridges which support current standards for both mechanisms , and which far outperform the jvm built-in . examples : openlink jdbc-odbc bridge , sequelink jdbc-odbc bridge . ole db-to-odbc bridges . an ole db-odbc bridge consists of an ole db provider which uses the services of an odbc driver to connect to a target database . this provider translates ole db method calls into odbc function calls . programmers usually use such a bridge when a given database lacks an ole db provider , but is accessible through an odbc driver . microsoft ships one , msdasql.dll , as part of the mdac system component bundle , together with other database drivers , to simplify development in com-aware languages ( e.g . visual basic ) . third parties have also developed such , notably openlink software whose 64-bit ole db provider for odbc data sources filled the gap when microsoft initially deprecated this bridge for their 64-bit os . microsoft , '' data access technologies road map '' , deprecated mdac components , microsoft '' ado programmer 's guide '' appendix a : providers , microsoft ole db provider for odbc , retrieved july 30 , 2005 . ( microsoft later relented , and 64-bit windows starting with windows server 2008 and windows vista sp1 have shipped with a 64-bit version of msdasql . ) examples : openlink oledb-odbc bridge , sequelink oledb-odbc bridge . ado.net-to-odbc bridges . an ado.net-odbc bridge consists of an ado.net provider which uses the services of an odbc driver to connect to a target database . this provider translates ado.net method calls into odbc function calls . programmers usually use such a bridge when a given database lacks an ado.net provider , but is accessible through an odbc driver . microsoft ships one as part of the mdac system component bundle , together with other database drivers , to simplify development in c . third parties have also developed such . examples : openlink ado.net-odbc bridge , sequelink ado.net-odbc bridge . see also . gnu data access java database connectivity ( jdbc ) windows open services architecture odbc administrator . references . ; bibliography ; citations . external links . microsoft odbc overview os400 and i5os odbc administration presentation slides from www.roth.net microsoft odbc & data access apis history article .