Command pattern

overview . the command design pattern is one of the twenty-three well-known design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software , that is , objects that are easier to implement , change , test , and reuse . using the command design pattern can solve these problems : coupling the invoker of a request to a particular request should be avoided . that is , hard-wired requests should be avoided . it should be possible to configure an object ( that invokes a request ) with a request . implementing ( hard-wiring ) a request directly into a class is inflexible because it couples the class to a particular request at compile-time , which makes it impossible to specify a request at run-time . using the command design pattern describes the following solution : define separate ( command ) objects that encapsulate a request . a class delegates a request to a command object instead of implementing a particular request directly . this enables one to configure a class with a command object that is used to perform a request . the class is no longer coupled to a particular request and has no knowledge ( is independent ) of how the request is carried out . see also the uml class and sequence diagram below . structure . uml class and sequence diagram . in the above uml class diagram , the invoker class does n't implement a request directly . instead , invoker refers to the command interface to perform a request ( command.execute ( ) ) , which makes the invoker independent of how the request is performed . the command1 class implements the command interface by performing an action on a receiver ( receiver1.action1 ( ) ) . the uml sequence diagram shows the run-time interactions : the invoker object calls execute ( ) on a command1 object . command1 calls action1 ( ) on a receiver1 object , which performs the request . uml class diagram . . uses . ; gui buttons and menu items : in swing and borland delphi programming , an is a command object . in addition to the ability to perform the desired command , an may have an associated icon , keyboard shortcut , tooltip text , and so on . a toolbar button or menu item component may be completely initialized using only the object . ; macro recording : if all user actions are represented by command objects , a program can record a sequence of actions simply by keeping a list of the command objects as they are executed . it can then '' play back '' the same actions by executing the same command objects again in sequence . if the program embeds a scripting engine , each command object can implement a method , and user actions can then be easily recorded as scripts . ; mobile code : using languages such as java where code can be streamed/slurped from one location to another via urlclassloaders and codebases the commands can enable new behavior to be delivered to remote locations ( ejb command , master worker ) . ; multi-level undo : if all user actions in a program are implemented as command objects , the program can keep a stack of the most recently executed commands . when the user wants to undo a command , the program simply pops the most recent command object and executes its method . ; networking : it is possible to send whole command objects across the network to be executed on the other machines , for example player actions in computer games . ; parallel processing : where the commands are written as tasks to a shared resource and executed by many threads in parallel ( possibly on remote machines ; this variant is often referred to as the master/worker pattern ) ; progress bars : suppose a program has a sequence of commands that it executes in order . if each command object has a method , the program can easily estimate the total duration . it can show a progress bar that meaningfully reflects how close the program is to completing all the tasks . ; thread pools : a typical , general-purpose thread pool class might have a public method that adds a work item to an internal queue of tasks waiting to be done . it maintains a pool of threads that execute commands from the queue . the items in the queue are command objects . typically these objects implement a common interface such as that allows the thread pool to execute the command even though the thread pool class itself was written without any knowledge of the specific tasks for which it would be used . ; transactional behavior : similar to undo , a database engine or software installer may keep a list of operations that have been or will be performed . should one of them fail , all others can be reversed or discarded ( usually called rollback ) . for example , if two database tables that refer to each other must be updated , and the second update fails , the transaction can be rolled back , so that the first table does not now contain an invalid reference . ; wizards : often a wizard presents several pages of configuration for a single action that happens only when the user clicks the '' finish '' button on the last page . in these cases , a natural way to separate user interface code from application code is to implement the wizard using a command object . the command object is created when the wizard is first displayed . each wizard page stores its gui changes in the command object , so the object is populated as the user progresses . '' finish '' simply triggers a call to . this way , the command class will work . terminology . the terminology used to describe command pattern implementations is not consistent and can therefore be confusing . this is the result of ambiguity , the use of synonyms , and implementations that may obscure the original pattern by going well beyond it . ambiguity . the term command is ambiguous . for example , move up , move up may refer to a single ( move up ) command that should be executed twice , or it may refer to two commands , each of which happens to do the same thing ( move up ) . if the former command is added twice to an undo stack , both items on the stack refer to the same command instance . this may be appropriate when a command can always be undone the same way ( e.g . move down ) . both the gang of four and the java example below use this interpretation of the term command . on the other hand , if the latter commands are added to an undo stack , the stack refers to two separate objects . this may be appropriate when each object on the stack must contain information that allows the command to be undone . for example , to undo a delete selection command , the object may contain a copy of the deleted text so that it can be re-inserted , if the delete selection command must be undone . note that using a separate object for each invocation of a command is also an example of the chain of responsibility pattern . the term execute is also ambiguous . it may refer to running the code identified by the command object 's execute method . however , in microsoft 's windows presentation foundation a command is considered to have been executed when the command 's execute method has been invoked , but that does not necessarily mean that the application code has run . that occurs only after some further event processing . synonyms and homonyms . client , source , invoker : the button , toolbar button , or menu item clicked , the shortcut key pressed by the user . command object , routed command object , action object : a singleton object ( e.g . there is only one copycommand object ) , which knows about shortcut keys , button images , command text , etc . related to the command . a source/invoker object calls the command/action object 's execute/performaction method . the command/action object notifies the appropriate source/invoker objects when the availability of a command/action has changed . this allows buttons and menu items to become inactive ( grayed out ) when a command/action can not be executed/performed . receiver , target object : the object that is about to be copied , pasted , moved , etc . the receiver object owns the method that is called by the command 's execute method . the receiver is typically also the target object . for example , if the receiver object is a cursor and the method is called moveup , then one would expect that the cursor is the target of the moveup action . on the other hand , if the code is defined by the command object itself , the target object will be a different object entirely . command object , routed event arguments , event object : the object that is passed from the source to the command/action object , to the target object to the code that does the work . each button click or shortcut key results in a new command/event object . some implementations add more information to the command/event object as it is being passed from one object ( e.g . copycommand ) to another ( e.g . document section ) . other implementations put command/event objects in other event objects ( like a box inside a bigger box ) as they move along the line , to avoid naming conflicts . ( see also chain of responsibility pattern . ) handler , executedroutedeventhandler , method , function : the actual code that does the copying , pasting , moving , etc . in some implementations the handler code is part of the command/action object . in other implementations the code is part of the receiver/target object , and in yet other implementations the handler code is kept separate from the other objects . command manager , undo manager , scheduler , queue , dispatcher , invoker : an object that puts command/event objects on an undo stack or redo stack , or that holds on to command/event objects until other objects are ready to act on them , or that routes the command/event objects to the appropriate receiver/target object or handler code . implementations that go well beyond the original command pattern . microsoft 's windows presentation foundation ( wpf ) , introduces routed commands , which combine the command pattern with event processing . as a result , the command object no longer contains a reference to the target object nor a reference to the application code . instead , invoking the command object 's execute command results in a so-called executed routed event that during the event 's tunneling or bubbling may encounter a so-called binding object that identifies the target and the application code , which is executed at that point . example . consider a '' simple '' switch . in this example we configure the switch with two commands : to turn the light on and to turn the light off . a benefit of this particular implementation of the command pattern is that the switch can be used with any device , not just a light . the switch in the following c implementation turns a light on and off , but the switch 's constructor is able to accept any subclasses of command for its two parameters . for example , you could configure the switch to start an engine . using system ; namespace commandpattern . see also . batch queue closure command queue function object job scheduler model-view-controller priority queue software design pattern gof - design patterns . references . external links . command pattern java tip 68 : learn how to implement the command pattern in java