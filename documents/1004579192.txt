ZIP (file format)

combination with other file formats . the file format allows for a comment containing up to 65,535 ( 2 16 −1 ) bytes of data to occur at the end of the file after the central directory . also , because the central directory specifies the offset of each file in the archive with respect to the start , it is possible for the first file entry to start at an offset other than zero , although some tools , for example gzip , will not process archive files that do not start with a file entry at offset zero . this allows arbitrary data to occur in the file both before and after the zip archive data , and for the archive to still be read by a zip application . a side-effect of this is that it is possible to author a file that is both a working zip archive and another format , provided that the other format tolerates arbitrary data at its end , beginning , or middle . self-extracting archives ( sfx ) , of the form supported by winzip , take advantage of this , in that they are executable files that conform to the pkzip appnote.txt specification , and can be read by compliant zip tools or libraries . this property of the format , and of the jar format which is a variant of zip , can be exploited to hide rogue content ( such as harmful java classes ) inside a seemingly harmless file , such as a gif image uploaded to the web . this so-called gifar exploit has been demonstrated as an effective attack against web applications such as facebook . . limits . the minimum size of a file is 22 bytes . such an empty zip file contains only an end of central directory record ( eocd ) : 0x50,0x4b,0x05,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 the maximum size for both the archive file and the individual files inside it is 4,294,967,295 bytes ( 2 32 −1 bytes , or 4 gib minus 1 byte ) for standard zip . for zip64 , the maximum size is 18,446,744,073,709,551,615 bytes ( 2 64 −1 bytes , or 16 eib minus 1 byte ) . . proprietary extensions . . extra field . file format includes an extra field facility within file headers , which can be used to store extra data not defined by existing zip specifications , and which allow compliant archivers that do not recognize the fields to safely skip them . header ids 0–31 are reserved for use by pkware . the remaining ids can be used by third-party vendors for proprietary usage . strong encryption controversy . when winzip 9.0 public beta was released in 2003 , winzip introduced its own aes-256 encryption , using a different file format , along with the documentation for the new specification . the encryption standards themselves were not proprietary , but pkware had not updated appnote.txt to include strong encryption specification ( ses ) since 2001 , which had been used by pkzip versions 5.0 and 6.0 . winzip technical consultant kevin kearney and stuffit product manager mathew covington accused pkware of withholding ses , but pkzip chief technology officer jim peterson claimed that certificate-based encryption was still incomplete . in another controversial move , pkware applied for a patent on describing a method for combining zip and strong encryption to create a secure file . in the end , pkware and winzip agreed to support each other 's products . on , pkware announced the support of winzip-based aes compression format . in a later version of winzip beta , it was able to support ses-based zip files . pkware eventually released version 5.2 of the . zip file format specification to the public , which documented ses . the free software project 7-zip also supports aes , but not ses in zip files ( as does its posix port p7zip ) . when using aes encryption under winzip , the compression method is always set to 99 , with the actual compression method stored in an aes extra data field . in contrast , strong encryption specification stores the compression method in the basic file header segment of local header and central directory , unless central directory encryption is used to mask/encrypt metadata . implementation . there are numerous . zip tools available , and numerous . zip libraries for various programming environments ; licenses used include proprietary and free software . winzip , winrar , info-zip , 7-zip , peazip and b1 free archiver are well-known . zip tools , available on various platforms . some of those tools have library or programmatic interfaces . some development libraries licensed under open source agreement are libzip , libarchive , and info-zip . for java : java platform , standard edition contains the package '' java.util.zip '' to handle standard . zip files ; the zip64file library specifically supports large files ( larger than 4 & nbsp ; gb ) and treats . zip files using random access ; and the apache ant tool contains a more complete implementation released under the apache software license . the info-zip implementations of the . zip format adds support for unix filesystem features , such as user and group ids , file permissions , and support for symbolic links . the apache ant implementation is aware of these to the extent that it can create files with predefined unix permissions . the info-zip implementations also know how to use the error correction capabilities built into the . zip compression format . some programs do not , and will fail on a file that has errors . the info-zip windows tools also support ntfs filesystem permissions , and will make an attempt to translate from ntfs permissions to unix permissions or vice versa when extracting files . this can result in potentially unintended combinations , e.g . exe files being created on ntfs volumes with executable permission denied . versions of microsoft windows have included support for . zip compression in explorer since the microsoft plus ! pack was released for windows 98 . microsoft calls this feature '' compressed folders '' . not all . zip features are supported by the windows compressed folders capability . for example , encryption is not supported in windows 10 home edition , although it can decrypt . unicode entry encoding is not supported until windows 7 , while split and spanned archives are not readable or writable by the compressed folders feature , nor is aes encryption supported . microsoft office started using the zip archive format in 2006 for their office open xml . docx , . xlsx , . pptx , etc . files , which became the default file format with microsoft office 2007 . legacy . there are numerous other standards and formats using '' zip '' as part of their name . for example , zip is distinct from gzip , and the latter is defined in ietf . both zip and gzip primarily use the deflate algorithm for compression . likewise , the zlib format ( ietf also uses the deflate compression algorithm , but specifies different headers for error and consistency checking . other common , similarly named formats and programs with different native formats include 7-zip , bzip2 , and rzip . concerns . the theoretical maximum compression factor for a raw deflate stream is about 1032 to one , but by exploiting the zip format in unintended ways , zip archives with compression ratios of billions to one can be constructed . these zip bombs unzip to extremely large sizes , overwhelming the capacity of the computer they are decompressed on .