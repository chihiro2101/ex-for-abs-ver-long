Software design pattern

history . patterns originated as an architectural concept by christopher alexander as early as 1977 ( c.f . '' the pattern of streets , '' journal of the aip , september , 1977 , vol . 32 , no . 3 , pp . 273-278 ) . in 1987 , kent beck and ward cunningham began experimenting with the idea of applying patterns to programming – specifically pattern languages – and presented their results at the oopsla conference that year . in the following years , beck , cunningham and others followed up on this work . design patterns gained popularity in computer science after the book design patterns was published in 1994 by the so-called '' gang of four '' ( gamma et al . ) , which is frequently abbreviated as '' gof '' . that same year , the first pattern languages of programming conference was held , and the following year the portland pattern repository was set up for documentation of design patterns . the scope of the term remains a matter of dispute . notable books in the design pattern genre include : although design patterns have been applied practically for a long time , formalization of the concept of design patterns languished for several years . . practice . design patterns can speed up the development process by providing tested , proven development paradigms . effective software design requires considering issues that may not become visible until later in the implementation . freshly written code can often have hidden subtle issues that take time to be detected , issues that sometimes can cause major problems down the road . reusing design patterns helps to prevent such subtle issues , and it also improves code readability for coders and architects who are familiar with the patterns . in order to achieve flexibility , design patterns usually introduce additional levels of indirection , which in some cases may complicate the resulting designs and hurt application performance . by definition , a pattern must be programmed anew into each application that uses it . since some authors see this as a step backward from software reuse as provided by components , researchers have worked to turn patterns into components . meyer and arnout were able to provide full or partial componentization of two-thirds of the patterns they attempted . software design techniques are difficult to apply to a broader range of problems . design patterns provide general solutions , documented in a format that does not require specifics tied to a particular problem . structure . design patterns are composed of several sections ( see below ) . of particular interest are the structure , participants , and collaboration sections . these sections describe a design motif : a prototypical micro-architecture that developers copy and adapt to their particular designs to solve the recurrent problem described by the design pattern . a micro-architecture is a set of program constituents ( e.g . , classes , methods . ) and their relationships . developers use the design pattern by introducing in their designs this prototypical micro-architecture , which means that micro-architectures in their designs will have structure and organization similar to the chosen design motif . domain-specific patterns . efforts have also been made to codify design patterns in particular domains , including use of existing design patterns as well as domain specific design patterns . examples include user interface design patterns , information visualization , secure design , '' secure usability '' , web design and business model design . the annual pattern languages of programming conference proceedings pattern languages of programming , conference proceedings ( annual , 1994— ) include many examples of domain-specific patterns . classification and list . design patterns had originally been categorized into 3 sub-classifications based on kind of problem they solve . creational patterns provide the capability to create objects based on a required criterion and in a controlled way . structural patterns are about organizing different classes and objects to form larger structures and provide new functionality . finally , behavioral patterns are about identifying common communication patterns between objects and realize these patterns . creational patterns . . documentation . the documentation for a design pattern describes the context in which the pattern is used , the forces within the context that the pattern seeks to resolve , and the suggested solution . there is no single , standard format for documenting design patterns . rather , a variety of different formats have been used by different pattern authors . however , according to martin fowler , certain pattern forms have become more well-known than others , and consequently become common starting points for new pattern-writing efforts . one example of a commonly used documentation format is the one used by erich gamma , richard helm , ralph johnson , and john vlissides in their book design patterns . it contains the following sections : pattern name and classification : a descriptive and unique name that helps in identifying and referring to the pattern . intent : a description of the goal behind the pattern and the reason for using it . also known as : other names for the pattern . motivation ( forces ) : a scenario consisting of a problem and a context in which this pattern can be used . applicability : situations in which this pattern is usable ; the context for the pattern . structure : a graphical representation of the pattern . class diagrams and interaction diagrams may be used for this purpose . participants : a listing of the classes and objects used in the pattern and their roles in the design . collaboration : a description of how classes and objects used in the pattern interact with each other . consequences : a description of the results , side effects , and trade offs caused by using the pattern . implementation : a description of an implementation of the pattern ; the solution part of the pattern . sample code : an illustration of how the pattern can be used in a programming language . known uses : examples of real usages of the pattern . related patterns : other patterns that have some relationship with the pattern ; discussion of the differences between the pattern and similar patterns . criticism . it has been observed that design patterns may just be a sign that some features are missing in a given programming language ( java or c++ for instance ) . peter norvig demonstrates that 16 out of the 23 patterns in the design patterns book ( which is primarily focused on c++ ) are simplified or eliminated ( via direct language support ) in lisp or dylan . related observations were made by hannemann and kiczales who implemented several of the 23 design patterns using an aspect-oriented programming ( aspectj ) and showed that code-level dependencies were removed from the implementations of 17 of the 23 design patterns and that aspect-oriented programming could simplify the implementations of design patterns . see also paul graham 's essay '' revenge of the nerds '' . inappropriate use of patterns may unnecessarily increase complexity . . see also . abstraction principle algorithmic skeleton anti-pattern architectural pattern debugging patterns design pattern distributed design patterns double-chance function enterprise architecture framework grasp ( object-oriented design ) helper class interaction design pattern list of software development philosophies list of software engineering topics pattern language pattern theory pedagogical patterns portland pattern repository refactoring software development methodology . references . further reading .