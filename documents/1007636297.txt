Plug and play

history of device configuration . some early microcomputer peripheral devices required the end user physically to cut some wires and solder together others in order to make configuration changes ; such changes were intended to be largely permanent for the life of the hardware . as computers became more accessible to the general public , the need developed for more frequent changes to be made by computer users unskilled with using soldering irons . rather than cutting and soldering connections , configuration was accomplished by jumpers or dip switches . later on this configuration process was automated : plug and play . . msx . the msx system , released in 1983 , was designed to be plug and play from the ground up , and achieved this by a system of slots and subslots , where each had its own virtual address space , thus eliminating device addressing conflicts in its very source . no jumpers or any manual configuration was required , and the independent address space for each slot allowed very cheap and commonplace chips to be used , alongside cheap glue logic . on the software side , the drivers and extensions were supplied in the card 's own rom , thus requiring no disks or any kind of user intervention to configure the software . the rom extensions hardware abstraction and offered standard apis as specified by ascii corporation . nubus . in 1984 , the nubus architecture was developed by the massachusetts institute of technology ( mit ) as a platform agnostic peripheral interface that fully automated device configuration . the specification was sufficiently intelligent that it could work with both endianness and little endian computer platforms that had previously been mutually incompatible . however , this agnostic approach increased interfacing complexity and required support chips on every device which in the 1980s was expensive to do , and apart from its use in apple macintoshes and next machines , the technology was not widely adopted . amiga autoconfig and zorro bus . in 1984 , commodore developed the autoconfig protocol and the zorro expansion bus for its amiga line of expandable computers . the first public appearance was in the ces computer show at las vegas in 1985 , with the so-called '' lorraine '' prototype . like nubus , zorro devices had absolutely no jumpers or dip switches . configuration information was stored on a read-only device on each peripheral , and at boot time the host system allocated the requested resources to the installed card . the zorro architecture did not spread to general computing use outside of the amiga product line , but was eventually upgraded as zorro ii and zorro iii for the later iteration of amiga computers . micro-channel architecture . thumb in 1987 , ibm released an update to the ibm pc known as the personal system/2 line of computers using the micro channel architecture . the ps/2 was capable of totally automatic self-configuration . every piece of expansion hardware was issued with a floppy disk containing a special file used to auto-configure the hardware to work with the computer . the user would install the device , turn on the computer , load the configuration information from the disk , and the hardware automatically assigned interrupts , dma , and other needed settings . however , the disks posed a problem if they were damaged or lost , as the only options at the time to obtain replacements were via postal mail or ibm 's dial-up bbs service . without the disks , any new hardware would be completely useless and the computer would occasionally not boot at all until the unconfigured device was removed . micro channel did not gain widespread support because ibm wanted to exclude clone manufacturers from this next generation computing platform . anyone developing for mca had to sign non-disclosure agreements and pay royalties to ibm for each device sold , putting a price premium on mca devices . end-users and clone manufacturers revolted against ibm and developed their own open standards bus , known as eisa . consequently , mca usage languished except in ibm 's mainframes . isa and pci self-configuration . in time , many industry standard architecture ( isa ) cards incorporated , through proprietary and varied techniques , hardware to self-configure or to provide for software configuration ; often , the card came with a configuration program on disk that could automatically set the software-configurable ( but not itself self-configuring ) hardware . some cards had both jumpers and software-configuration , with some settings controlled by each ; this compromise reduced the number of jumpers that had to be set , while avoiding great expense for certain settings , e.g . nonvolatile registers for a base address setting . the problems of required jumpers continued on , but slowly diminished as more and more devices , both isa and other types , included extra self-configuration hardware . however , these efforts still did not solve the problem of making sure the end-user has the appropriate software driver for the hardware . isa pnp or ( legacy ) plug & play isa was a plug-and-play system that used a combination of modifications to hardware , the system bios , and operating system software to automatically manage resource allocations . it was superseded by the pci bus during the mid-1990s . the pci plug and play ( autoconfiguration ) is based on the pci bios specification in 1990s , the pci bios specification is superseded by the acpi in 2000s . legacy plug and play . in 1995 , microsoft released windows 95 , which tried to automate device detection and configuration as much as possible , but could still fall back to manual settings if necessary . during the initial install process of windows 95 , it would attempt to automatically detect all devices installed in the system . since full auto-detection of everything was a new process without full industry support , the detection process constantly wrote to a progress tracking log file during the detection process . in the event that device probing would fail and the system would freeze , the end-user could reboot the computer , restart the detection process , and the installer would use the tracking log to skip past the point that caused the previous freeze . scott mueller , upgrading and repairing pcs , eleventh edition , que , 2999 , , page 1370 at the time , there could be a mix of devices in a system , some capable of automatic configuration , and some still using fully manual settings via jumpers and dip switches . the old world of dos still lurked underneath windows 95 , and systems could be configured to load devices three different ways : through windows 95 device manager drivers only using dos drivers loaded in the config.sys and autoexec.bat configuration files using both dos drivers and windows 95 device manager drivers together microsoft could not assert full control over all device settings , so configuration files could include a mix of driver entries inserted by the windows 95 automatic configuration process , and could also include driver entries inserted or modified manually by the computer users themselves . the windows 95 device manager also could offer users a choice of several semi-automatic configurations to try to free up resources for devices that still needed manual configuration . also , although some later isa devices were capable of automatic configuration , it was common for pc isa expansion cards to limit themselves to a very small number of choices for interrupt request lines . for example , a network interface might limit itself to only interrupts 3 , 7 , and 10 , while a sound card might limit itself to interrupts 5 , 7 , and 12 . this results in few configuration choices if some of those interrupts are already used by some other device . the hardware of pc computers additionally limited device expansion options because interrupts could not be shared , and some multifunction expansion cards would use multiple interrupts for different card functions , such as a dual-port serial card requiring a separate interrupt for each serial port . because of this complex operating environment , the autodetection process sometimes produced incorrect results , especially in systems with large numbers of expansion devices . this led to device conflicts within windows 95 , resulting in devices which were supposed to be fully self-configuring failing to work . the unreliability of the device installation process led to plug and play being sometimes referred to as plug and pray . until approximately 2000 , pc computers could still be purchased with a mix of isa and pci slots , so it was still possible that manual isa device configuration might be necessary . but with successive releases of new operating systems like windows 2000 and windows xp , microsoft had sufficient clout to say that drivers would no longer be provided for older devices that did not support auto-detection . in some cases , the user was forced to purchase new expansion devices or a whole new system to support the next operating system release . current plug and play interfaces . several completely automated computer interfaces are currently used , each of which requires no device configuration or other action on the part of the computer user , apart from software installation , for the self-configuring devices . these interfaces include : ieee 1394 ( firewire ) pci , mini pci pci express , mini pci express , thunderbolt pcmcia , pc card , expresscard sata , serial attached scsi usb for most of these interfaces , very little technical information is available to the end-user about the performance of the interface . although both firewire and usb have bandwidth that must be shared by all devices , most modern operating systems are unable to monitor and report the amount of bandwidth being used or available , or to identify which devices are currently using the interface .